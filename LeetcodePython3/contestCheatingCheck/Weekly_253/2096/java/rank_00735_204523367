class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] obstacles) {
        int n = obstacles.length;
        int[] res = new int[n];
        int[] dp = new int[n + 1];
        dp[1] = obstacles[0];
        res[0] = 1;
        int cur = 1;
        for (int i = 1; i < n; i++) {
            if (obstacles[i] >= dp[cur]) {
                res[i] = cur + 1;
                cur++;
                dp[cur] = obstacles[i];
            } else {
                int idx = searchVal(dp, obstacles[i], cur);
                res[i] = idx + 1;
                idx = search(dp, obstacles[i], cur);
                dp[idx] = obstacles[i];
            }
        }
        return res;
    }

    private int search(int[] dp, int val, int end) {
        int l = 1, r = end, res = 1;
        while (l <= r) {
            int mid = (l + r) >> 1;
            if (val < dp[mid]) {
                res = mid;
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return res;
    }

    private int searchVal(int[] dp, int val, int end) {
        int l = 1, r = end, res = 0;
        while (l <= r) {
            int mid = (l + r) >> 1;
            if (val >= dp[mid]) {
                res = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return res;
    }
}