class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] obstacles) {
        int[] res = new int[obstacles.length];
        res[0] = 1;

        // dp[i]表示长度为i+1的最长上升子序列的末尾元素的最小值
        int[] dp = new int[obstacles.length];
        // len表示当前最长上升子序列的长度
        int len = 0;

        for (int i = 0; i < obstacles.length; i++) {
            int idx = Arrays.binarySearch(dp, 0, len, obstacles[i]);
            if (idx < 0) {
                idx = -idx - 1;
            } else {
                idx = binarySearch(dp, 0, len - 1, obstacles[i]) + 1;
            }

            dp[idx] = obstacles[i];
            res[i] = idx + 1;
            if (idx == len) {
                len++;
            }
        }

        return res;
    }

    private int binarySearch(int[] nums, int low, int high, int target) {
        int res = -1;
        while (low <= high) {
            int mid = (low + high) >>> 1;
            if (nums[mid] < target) {
                low = mid + 1;
            } else if (nums[mid] > target) {
                high = mid - 1;
            } else {
                res = mid;
                low = mid + 1;
            }
        }
        return res;
    }
}