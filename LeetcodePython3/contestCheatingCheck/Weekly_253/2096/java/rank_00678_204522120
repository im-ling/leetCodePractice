class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] obstacles) {
        // Deque<Integer> stack = new ArrayDeque<>();
        // stack.offerLast(0);
        int[] res = new int[obstacles.length];
        int[] dp = new int[obstacles.length+1];
        int len = 1;
        dp[len] = obstacles[0];
        res[0] = 1;
        for(int i=1; i<obstacles.length; i++){
            // int cur =0;
            // if(i!=obstacles.length) cur = obstacles[i];
            // while(!stack.isEmpty() && obstacles[stack.peekLast()] > cur){
            //     int temp = stack.pollLast();
            //     res[temp] = stack.size() + 1;
            // }
            // stack.offer(i);
            if(obstacles[i] >= dp[len]){
                dp[++len] = obstacles[i];
                res[i] = len;
                // System.out.println(len + "," + Arrays.toString(dp));
            }else{
                int l=1, r=len, pos=0;
                while(l<=r){
                    int mid = (l+r)/2;
                    if(dp[mid] <= obstacles[i]){
                        pos = mid;
                        l=mid+1;
                    }else{
                        r=mid-1;
                    }
                }
                dp[pos+1] = obstacles[i];
                // System.out.println(i + "," + pos + "," + len);
                // System.out.println(Arrays.toString(dp));
                res[i] = pos+1;
            }
            
        }
        return res;
    }
}
//[5,1,5,5,1,3,4,5,1,4]