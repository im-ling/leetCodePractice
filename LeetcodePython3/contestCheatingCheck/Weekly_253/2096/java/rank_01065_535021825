class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] nums) {
        int len = nums.length;
        
        ArrayList<Integer> sub = new ArrayList<>();
        sub.add(nums[0]);
        int[] ans = new int[len];
            ans[0]=1;
        for (int i = 1; i < nums.length; i++) {
            int num = nums[i];
            if (num >= sub.get(sub.size() - 1)) {
                sub.add(num);
                ans[i]=sub.size();
            } else {
                int j = binarySearch(sub, num);
                // System.out.println(sub.get(1)+" "+sub.get(2));
                // System.out.println(i+" "+j);
                sub.set(j, num);
                ans[i]=j+1;
            }
        }
        return ans;
    }

    
     private int binarySearch(ArrayList<Integer> sub, int num) {
        int left = 0;
        int right = sub.size() - 1;
        int mid = (left + right) / 2;
        int idx=left;
        while (left < right-1) {
            mid = left+ (right-left) / 2;
            if (sub.get(mid) <= num) {
                left = mid;
            } else {
                right = mid;
            }
        }
        // System.out.println(sub.get(left) +" "+sub.get(right));
         // System.out.println("right:"+right+" left:"+left);
        if(sub.get(left)>num) return left;
        else return right;
        // return left;
    }
}