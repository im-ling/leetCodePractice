class Solution {
  public int[] longestObstacleCourseAtEachPosition(int[] obstacles) {
    // LIS ending at each index 
    int n = obstacles.length; 
    int[] res = new int[n]; 
    int len = 0; 
    int[] dp = new int[n]; 
    for(int i = 0; i<n; i++){
      int idx = binarySearch(dp, 0, len, obstacles[i]); 
      dp[idx] = obstacles[i]; 
      len = Math.max(len, idx+1); 
      res[i] = idx+1; 
    }
    return res; 
  }
  
  private int binarySearch(int[] nums, int start, int end, int target){ // returns idx of first num greater than target
    int l = start, r = end-1; 
    while(l <= r){
      int m = (l+r)/2; 
      if(nums[m] <= target)
        l = m+1; 
      else
        r = m-1; 
    }
    return l; 
  }
}