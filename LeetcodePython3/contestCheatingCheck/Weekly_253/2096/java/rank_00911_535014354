class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] obstacles) {
        int n = obstacles.length;
        int[] ans = new int[n];
        
        List<Integer> list = new ArrayList<>();
        
        for (int i = 0; i < n; i++) {
            int num = obstacles[i];
            if (list.isEmpty()) {
                list.add(num);
                ans[i] = 1;
            } else {
                int index = bs(list, num);
                ans[i] = index + 1;
                if (index < list.size()) {
                    list.set(index, num);
                } else {
                    list.add(num);
                }
            }
        }
        return ans;
    }
    
    private int bs(List<Integer> list, int num) {
        int lo = 0, hi = list.size() - 1;
        while (lo <= hi) {
            int mid = (lo + hi) / 2;
            int value = list.get(mid);
            if (value <= num) {
                lo = mid + 1;
            } else {
                hi = mid - 1;
            }
        }
        return lo;
    }
}