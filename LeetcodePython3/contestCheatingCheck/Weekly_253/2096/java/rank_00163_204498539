class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] nums) {
        int[] ans=new int[nums.length];
        int length=nums.length;
        int[] dp=new int[length+1];
        Arrays.fill(dp,Integer.MAX_VALUE);
        dp[0]=Integer.MIN_VALUE;
        int currMax=0;
        for (int i = 0; i < length; i++) {
            int loc=find(dp,currMax,nums[i]);
            dp[loc+1]=nums[i];
            ans[i]=loc+1;
            currMax=Math.max(loc+1,currMax);
        }
        return ans;
    }
    public int lengthOfLIS(int[] nums) {
        int length=nums.length;
        int[] dp=new int[length+1];
        Arrays.fill(dp,Integer.MAX_VALUE);
        dp[0]=Integer.MIN_VALUE;
        int currMax=0;
        for (int i = 0; i <length ; i++) {
            int loc=find(dp,currMax,nums[i]);
            dp[loc+1]=nums[i];
            currMax=Math.max(loc+1,currMax);
        }
        return currMax;
    }
    private int find(int[] dp,int currMax,int value){
        int left=0,right=currMax;
        int ans=0;
        while (left<=right){
            int mid=(left+right)/2;
            if (dp[mid]<=value){
                left=mid+1;
                ans=mid;
            }else{
                right=mid-1;
            }
        }
        return ans;
    }
}