class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] obstacles) {
        int len = obstacles.length;
        int[] sorted = new int[len];
        sorted[0] = obstacles[0];
        int sortedLen = 1;
        
        int[] ans = new int[len];
        ans[0] = 1;
        
        for(int i = 1; i < len; i++){
            int index = firstOccurrence(sorted, sortedLen, obstacles[i]);
            
            sorted[index] = obstacles[i];
            ans[i] = index + 1;
            
            if(index == sortedLen){
                sortedLen++;
            }
        }
        
        return ans;
    }
    
    //larger 
    private int firstOccurrence(int[] nums, int len, int target){
        int left = 0;
        int right = len - 1;
        
        while(left < right - 1){
            int mid = left + (right - left) / 2;
        
            if(target >= nums[mid]){
                left = mid + 1;
            }else{
                right = mid;
            }
        }
        
        
        if(nums[left] > target){
            return left;
        }else if(nums[right] > target){
            return right;
        }else{
            return len;
        }
    }
}