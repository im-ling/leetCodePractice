class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] obstacles) {
        int n = obstacles.length;
        int[] nums = new int[n];
        int[] result = new int[n];
        int size = 0;
        for(int i = 0; i < n; i++){
            int tmp = obstacles[i];
            size = lis(nums, size, tmp);
            result[i] = find(nums, size, tmp);
        }
        return result;
    }
    
    private int lis(int[] nums, int size, int tmp){
        if(size == 0 || nums[size - 1] <= tmp){
            nums[size] = tmp;
            return size + 1;
        }
        int left = 0;
        int right = size;
        while(left < right){
            int mid = left + right >>> 1;
            if(nums[mid] > tmp){
                right = mid;
            }else{
                left = mid + 1;
            }
        }
        nums[right] = tmp;
        return size;
    }
    
    private int find(int[] nums, int size, int tmp){
        int left = 0;
        int right = size;
        while(left < right){
            int mid = left + right >>> 1;
            if(nums[mid] > tmp){
                right = mid;
            }else{
                left = mid + 1;
            }
        }
        return right;
    }
}