class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] obstacles) {
       int n = obstacles.length;
    int[] ans = new int[n];
    // ans[i] is the length of the longest obstacle course for index i.

    // Map from height to count, higher height map to higher count
    TreeMap<Integer, Integer> hcm = new TreeMap<>();
    ans[0] = 1;
    hcm.put(obstacles[0], 1);
    for (int i = 1; i < n; i++) {
      int h = obstacles[i];
      Integer fk = hcm.floorKey(h);
      if (fk == null) {
        // lowest height so far
        hcm.put(h, 1);
        ans[i] = 1;
      } else {
        int count = hcm.get(fk) + 1;
        hcm.put(h, count);
        ans[i] = count;
        while (true) {
          Integer ck = hcm.ceilingKey(h + 1);
          if (ck == null || hcm.get(ck) > count) {
            break;
          }
          hcm.remove(ck);
          h++;
        }
      }
    }
    return ans;
    }
}