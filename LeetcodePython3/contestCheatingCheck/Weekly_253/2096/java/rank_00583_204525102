class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] ob) {
        List<Integer> list = new ArrayList<>();
        int n = ob.length;
        int[] res = new int[n];
        res[0] = 1;
        list.add(ob[0]);
        for (int i = 1; i < n; i++){
            int size = list.size();
            if (ob[i] >= list.get(size - 1)) {
                list.add(ob[i]);
                res[i] = size + 1;
                
            }
            else if (ob[i] < list.get(0)){
                res[i] = 1;
                list.set(0, ob[i]);
            }
            else{
                int index = find(list, ob[i]);
                // System.out.println(i +" : " + index);
                res[i] = index + 2;
                list.set(index + 1, ob[i]);
            }
            

            
        }
        return res;
    }
    
    // 找到最后一个小于等于target的位置
    public int find(List<Integer> list, int target){
        int l = 0, r = list.size() - 1;
        while (l < r){
            int mid = (l + r + 1) >> 1;
            if (list.get(mid) <= target){
                l = mid;
            }else{
                r = mid - 1;
            }
        }
        return l;
    }

}
