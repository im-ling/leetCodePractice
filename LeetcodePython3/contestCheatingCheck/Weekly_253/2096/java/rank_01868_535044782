class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] nums) {
        ArrayList<Integer> sub = new ArrayList<>();
        sub.add(nums[0]);
        int ans=1;
        int lis[]=new int[nums.length];
        lis[0]=1;
        
        for (int i = 1; i < nums.length; i++) {
            int num = nums[i];
            if (num >= sub.get(sub.size() - 1)) {
                sub.add(num);
                lis[i]=sub.size();
            } else {
                int j = binarySearch(sub, num);
                 // System.out.println(sub);
                 // System.out.println(j);
               if(sub.get(j)==num)j++;
                sub.set(j, num);
                int k=j+1;
             
                lis[i]=k;
                
            }
          
        }       
        // System.out.println(sub);

        return lis;
        
    }
    private int binarySearch(ArrayList<Integer> sub, int num) {
        int left = 0;
        int right = sub.size() - 1;
        int mid = (left + right) / 2;
        int ans=-1;
         // System.out.println(sub);
        while (left <= right) {
            mid = (left + right) / 2;
             // System.out.println(left+" "+right+" "+mid);
            if (sub.get(mid) == num) {
                ans= mid;
              left = mid + 1;
            }
            
           else if (sub.get(mid) < num) {
                left = mid + 1;
            } else {
                right = mid-1;
            }
        }
        
        if(ans>=0)return ans;
        
        return left;
    }

}