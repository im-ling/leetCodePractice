class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] obstacles) {
        int n = obstacles.length;
        int[] ans = new int[n];
        List<Integer> list = new ArrayList();
        for (int i = 0; i < n; i++) {
            int idx = binarySearch(list, obstacles[i]);
            if (idx >= list.size()) {
                list.add(obstacles[i]);
            } else {
                list.set(idx, obstacles[i]);
            }
            ans[i] = idx + 1;
        }
        return ans;
    }
    
    public int binarySearch(List<Integer> list, int target) {
        int l = 0, r = list.size() - 1;
        while (l <= r) {
            int mid = (r - l) / 2 + l;
            if (list.get(mid) <= target) {
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return l;
    }
}