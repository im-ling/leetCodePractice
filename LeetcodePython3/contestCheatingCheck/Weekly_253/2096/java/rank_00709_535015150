class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] obs) {
        int n = obs.length;
        
        int[] lis = new int[n];
        int[] re = new int[n];
        int idx = 0;
        for(int i = 0; i < n; i++)
        {
            int lo = 0, hi = idx - 1;
            int val = obs[i];
            while(lo < hi)
            {
                int mid = (lo + hi + 1) / 2;
                if(lis[mid] > val) hi = mid - 1;
                else lo = mid;
            }
            if(idx == 0)
            {
                lis[idx++] = val;
                re[i] = 1;
            }
            else
            {
                if(lo == idx - 1)
                {
                    if(lis[lo] <= val)
                    {
                        lis[idx++] = val;
                        re[i] = idx;
                    }
                    else
                    {
                        lis[lo] = val;
                        re[i] = lo + 1;
                    }
                }
                else
                {
                    if(lis[lo] <= val)
                    {
                        lis[lo + 1] = val;
                        re[i] = lo + 1 + 1;
                    }
                    else
                    {
                        lis[lo] = val;
                        re[i] = lo + 1;
                    }
                }
            }
            // System.out.println(Arrays.toString(lis));
        }
        
        // System.out.println(map);
        
        return re;
    }
}