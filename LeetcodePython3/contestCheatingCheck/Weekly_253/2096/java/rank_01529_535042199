class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] obstacles) {
        int n = obstacles.length;
        int[] res = new int[n];
        int[] nonDecrease = new int[n];
        Arrays.fill(nonDecrease, Integer.MAX_VALUE);
        
        for (int i = 0; i < obstacles.length; i++) {
            int index = firstGT(obstacles[i], nonDecrease);
            nonDecrease[index] = obstacles[i];
            res[i] = index+1;
        }
        
        return res;
    }
    
    private int firstGT(int target, int[] nums) {
        
        int left = 0;
        int right = nums.length - 1;
        
        while (left + 1 < right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] <= target) {
                left = mid;
            }else {
                right = mid;
            }
        }
        
        if (nums[left] > target) {
            return left;
        }
        
        return right;
        
    }
}