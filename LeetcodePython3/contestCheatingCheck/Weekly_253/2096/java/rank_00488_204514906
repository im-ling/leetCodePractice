class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] nums) {
        // 找以 i 结尾的最长递增子序列
        int[] res = new int[nums.length];
        int[] tail = new int[nums.length];
        tail[0] = nums[0];
        res[0] = 1;
        // end 表示 tail 中最后一个元素（即当前的最长子序列长度）
        int end = 0;
        for(int i = 1; i < nums.length; i++) {
            if(nums[i] >= tail[end]) {
                tail[++end] = nums[i];
                res[i] = end + 1;
            }
            else if(nums[i] < tail[end]) {
                int index = binarySearch(tail, 0, end, nums[i]);
                res[i] = index + 1;
                tail[index] = nums[i];
            }
        }

        return res;
    }
    
    private int binarySearch(int[] tail, int left, int right, int target) {
        while(left < right) {
            int mid = left + (right - left) / 2;
            if(tail[mid] <= target) {
                left = mid + 1;
            }
            else {
                right = mid;
            }
        }
        return left;
    }
}