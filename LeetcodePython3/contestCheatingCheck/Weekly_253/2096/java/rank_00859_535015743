class Solution {
    private static class SegTree {
        int leftMost, rightMost;
        SegTree left, right;
        int max;
        int idx;

        SegTree(int leftMost, int rightMost, int[] arr) {
            this.leftMost = leftMost;
            this.rightMost = rightMost;
            if (leftMost == rightMost) {
                idx = leftMost;
                max = arr[leftMost];
            } else {
                final int mid = leftMost + rightMost >>> 1;
                left = new SegTree(leftMost, mid, arr);
                right = new SegTree(mid + 1, rightMost, arr);
                recalc();
            }
        }

        private void recalc() {
            if (leftMost == rightMost) {
                return;
            }
            max = Math.max(left.max, right.max);
            if (left.max >= right.max) {
                idx = left.idx;
            } else {
                idx = right.idx;
            }
        }

        private int[] query(int l, int r) {
            if (r < leftMost || l > rightMost) {
                return new int[] { (int) -1e9, -1 };
            }
            if (l <= leftMost && rightMost <= r) {
                return new int[] { max, idx };
            }
            final int[] ll = left.query(l, r);
            final int[] rr = right.query(l, r);
            if (ll[0] >= rr[0]) {
                return ll;
            } else {
                return rr;
            }
        }

        private void update(int idx, int val) {
            if (leftMost == rightMost) {
                max = val;
                this.idx = idx;
            } else {
                final int mid = leftMost + rightMost >>> 1;
                if (idx <= mid) {
                    left.update(idx, val);
                } else {
                    right.update(idx, val);
                }
                recalc();
            }
        }
    }

    public int[] longestObstacleCourseAtEachPosition(int[] obstacles) {
        final Map<Integer, Integer> normalize = new HashMap<>();
        int idx = 0;
        final TreeSet<Integer> ts = new TreeSet<>();
        for (int num : obstacles) {
            ts.add(num);
        }
        for (int zz : ts) {
            normalize.put(zz, idx++);
        }
        final int[] arr = new int[idx];
        final SegTree st = new SegTree(0, idx - 1, arr);
        final int[] res = new int[obstacles.length];
        for (int i = 0; i < obstacles.length; i++) {
            final int currIdx = normalize.get(obstacles[i]);
            final int[] qq = st.query(0, normalize.get(obstacles[i]));
            if (qq[0] == 0) {
                res[i] = 1;
                st.update(currIdx, 1);
            } else {
                st.update(currIdx, qq[0] + 1);
                res[i] = qq[0] + 1;
            }
        }
        return res;
    }
}