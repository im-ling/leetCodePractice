class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] obstacles) {
        int n = obstacles.length;
        int[] ans = new int[n];
        // lc 300
        int[] tails = new int[n];
        int size = 0;
        for (int i = 0; i < obstacles.length; i++) {
            int low = 0, high = size;
            while(low != high) {
                int mid = (low + high) / 2;
                if (tails[mid] <= obstacles[i]) {
                    low = mid + 1;
                } else {
                    high = mid;
                }
            }
            
            tails[low] = obstacles[i];
            if (low == size) {
                size += 1;
            }
            ans[i] = low+1;
            //System.out.println(Arrays.toString(tails));
        }
        return ans;
        
        // List<Integer> list = new ArrayList<>();
        // list.add(obstacles[0]);
        // ans[0] = 1;
        // for (int i = 1; i < n; i++) {
        //     int num = obstacles[i];
        //     if (num > list.get(list.size() - 1)) {
        //         list.add(num);
        //         ans[i] = list.size();
        //     } else {
        //         int idx = Collections.binarySearch(list, num);
        //         if (idx < 0) {
        //             idx = -idx - 1;
        //         }
        //         list.set(idx, num);
        //         ans[i] = idx;
        //     }
        // }
        // return ans;

    }
}