class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] obstacles) {
        List<Integer> indexs = new ArrayList<>();
        int[] res = new int[obstacles.length];
        for (int i = 0; i < obstacles.length; i++) {
            int cur = obstacles[i];
            int index = search(indexs, cur);
            if (index < indexs.size() && indexs.get(index) <= cur) {
                index++;
            }
            if (index == indexs.size()) {
                indexs.add(index, cur);
            } else {
                indexs.set(index, cur);
            }
            res[i] = index + 1;

        }
        return res;

    }

    public int search(List<Integer> arr, int target) {
        if (arr.isEmpty()) {
            return 0;
        }
        int left = 0;
        int right = arr.size() - 1;
        while (left <= right) {
            int mid = (right - left) / 2 + left;
            if (arr.get(mid) <= target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return Math.max(0, right);
    }


}