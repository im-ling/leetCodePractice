    class Solution {
        public int[] longestObstacleCourseAtEachPosition(int[] obstacles) {
            if (obstacles==null||obstacles.length==0)
                return new int[]{};
            int[] lis = new int[obstacles.length + 1];
            lis[0] = Integer.MIN_VALUE;
            for (int i = 1; i <= obstacles.length; i++) {
                lis[i] = Integer.MAX_VALUE;
            }
            int ret[]=new int[obstacles.length];
            for (int i = 0; i < obstacles.length; i++) {
                int index = firstGTE(lis, i,obstacles,ret);
                lis[index] = obstacles[i];
            }
            return ret;
        }


        private int firstGTE(int[] nums, int i,int[]obstacles,int[] ret) {
            int target=obstacles[i];
            int start = 0, end = nums.length - 1;
            while (start + 1 < end) {
                int mid = start + (end - start) / 2;
                if (nums[mid] > target) {
                    end = mid;
                } else {
                    start = mid;
                }
            }
            if (nums[start] > target) {
                ret[i]=start;
                return start;
            }
            ret[i]=end;
            return end;
        }
    }