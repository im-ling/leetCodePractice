class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] obstacles) {
        int dp[] = new int[obstacles.length+100];
        int ans[] = new int[obstacles.length];
        int len = 0;
        dp[++len] = obstacles[0];
        ans[0]=1;
        for (int j = 1; j < obstacles.length; j++) {
            if (obstacles[j] >= dp[len]) {
                dp[++len] = obstacles[j];
            }
            int index = bsearch(dp, obstacles[j], 1, len);
            dp[index] = obstacles[j];
            ans[j] = index;
        }

        return ans;
    }

    private static int bsearch(int[] dp, int value, int start, int end) {
        int mid;
        while (start < end) {
            mid = (start + end) / 2;
            if (dp[mid] > value) {
                end = mid;
            } else {
                start = mid + 1;
            }
        }
        return start;
    }
}