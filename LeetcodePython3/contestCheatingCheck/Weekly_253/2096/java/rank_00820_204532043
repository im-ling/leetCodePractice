class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] nums) {
        int[] ans = new int[nums.length];
        ans[0] = 1;
        List<Integer> list = new ArrayList<>();
        list.add(nums[0]);
        for (int i = 1; i < nums.length; i++) {
            if(nums[i] < list.get(0)) {
                list.set(0, nums[i]);
                ans[i] = 1;
            }else if(nums[i] >= list.get(list.size() - 1)) {
                list.add(nums[i]);
                ans[i] = list.size();
            } else {
                ans[i] = findAndSwap(list, nums[i]) + 1;
            }
        }
        
        return ans;
    }
    
    
    public int findAndSwap(List<Integer> list, int k) {
        
        int left = 0;
        int right = list.size() - 1;
        
        while(left < right) {
            int mid = (left + right) / 2;
            if(k >= list.get(mid)) left = mid + 1;
            else if (k < list.get(mid)) right = mid;
            else return mid;
        }
        list.set(left, k);
        
        return left;
    }
}