class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] obstacles) {
        int n = obstacles.length;
        int[] dp = new int[n];
        int[] res = new int[n];
        int length = 0;
        for (int i = 0; i < n; i++) {
            if (length == 0 || dp[length-1] <= obstacles[i]) {
                dp[length] = obstacles[i];
                length++;
                res[i] = length;
            } else {
                int idx = binarySearch(dp, 0, length-1, obstacles[i]);
                // System.out.println(idx);
                dp[idx] = obstacles[i];
                res[i] = idx + 1;
            }
        }
        return res;
    }
    
    private int binarySearch(int[] arr, int left, int right, int key) {
        // System.out.println(Arrays.toString(arr));
        // System.out.println(left);
        // System.out.println(right);
        // System.out.println(key);
        
        while (left < right) {
            if (left + 1 == right) {
                if (arr[left] > key) return left;
                return right;
            }
            int mid = (left + right) / 2;
            if (arr[mid] > key) right = mid;
            else left = mid + 1;
        }
        return left;
    }
}