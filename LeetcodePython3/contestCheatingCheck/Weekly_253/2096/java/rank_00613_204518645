class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] obstacles) {
        int n = obstacles.length;
        int[] dp = new int[n+1];
        dp[0] = 0;
        int high = 0;
        int[] ans = new int[n];
        for (int i = 0; i < n; i++) {
            int ob = obstacles[i];
            if (ob >= dp[high]) {
                high++;
                dp[high] = ob;
                ans[i] = high;
            } else {
                int id = binarySearch(dp, high, ob);
                ans[i] = id;
                dp[id] = ob;
            }
        }
        return ans;
    }

    private int binarySearch(int[] dp, int high, int target) {
        int L = 0, R = high;
        while (L < R) {
            int mid = L + (R - L) / 2;
            if (dp[mid] <= target) {
                L = mid + 1;
            } else if (dp[mid] > target) {
                R = mid;
            }
        }
        return L;
    }
}