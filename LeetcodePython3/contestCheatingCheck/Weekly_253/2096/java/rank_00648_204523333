class Solution {
    
    public int[] longestObstacleCourseAtEachPosition(int[] obstacles) {
        int[] tmp = new int[obstacles.length];
        int len = 0;
        int[] ans = new int[obstacles.length];
        for (int i = 0; i < obstacles.length; i++) {
            int obstacle = obstacles[i];
            int pos = bsearch(tmp, len, obstacle);
            if (pos == -1) {
                tmp[len++] = obstacle;
                ans[i] = len;
            } else {
                tmp[pos] = obstacle;
                ans[i] = pos+1;
            }
        }
        return ans;
    }

    // 第一个大于给定值的
    public int bsearch(int[] a, int n, int value) {
        int low = 0;
        int high = n - 1;
        while (low <= high) {
            int mid = low + ((high - low) >> 1);
            if (a[mid] > value) {
                if (mid == 0) {
                    return mid;
                }
                if (a[mid - 1] <= value) {
                    return mid;
                }
                high = mid - 1;
            } else if (a[mid] <= value) {
                low = mid + 1;
            }
        }
        return -1;
    }
}