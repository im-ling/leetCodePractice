class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] obstacles) {
        int n = obstacles.length;
        int[] res = new int[n];
        
        int[] tailTable = new int[n];
        int len = 1;
        res[0] = 1;
 
        tailTable[0] = obstacles[0];
        
        for (int i = 1; i < n; i++) {
            if (obstacles[i] < tailTable[0]) {
                tailTable[0] = obstacles[i];
                res[i] = 1;
            }
 
            else if (obstacles[i] >= tailTable[len - 1]) {
                tailTable[len++] = obstacles[i];
                res[i] = len;
            }
                
 
            else {
                int temp = CeilIndex(tailTable, -1, len - 1, obstacles[i]);
                tailTable[temp] = obstacles[i];
                res[i] = temp+1;
            }
                
        }
        return res;
        
    }
    
    int CeilIndex(int A[], int l, int r, int key)
    {
        while (r - l > 1) {
            int m = l + (r - l) / 2;
            if (A[m] > key)
                r = m;
            else
                l = m;
        }
 
        return r;
    }
}