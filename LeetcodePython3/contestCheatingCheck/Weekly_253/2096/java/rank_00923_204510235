class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] obstacles) {
        List<Integer> list = new ArrayList<>();
        int n = obstacles.length;
        int[] ans = new int[n];
        for(int i=0;i<n;i++){
            int k = obstacles[i];
            if(list.size() == 0 || k >= list.get(list.size()-1)){
                list.add(k);
                ans[i] = list.size();
            }else{
                int t = binaryFind(list,k);
                list.set(t,k);
                ans[i] = t+1;
            }
        }
        return ans;
    }

    private int binaryFind(List<Integer> list, int k) {
        int ans = 0;
        int l=0,r=list.size()-1;
        while(l<=r){
            int mid = (l+r)/2;
            if(k < list.get(mid)){
                ans = mid;
                r = mid-1;
            }else{
                l = mid+1;
            }
        }
        return ans;
    }
}