class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] obstacles) {
        int n = obstacles.length;
        int[] result = new int[n];
        
        List<Integer> arr = new ArrayList<>();
        
        for(int i=0;i<n;i++) {
            int index = binarySerach(arr, obstacles[i]);
            result[i] = index;
        }
        
        return result;
    }
    
    private int binarySerach(List<Integer> arr, int val) {
        
        int lo = 0;
        int hi = arr.size()-1;
        
        while(lo <= hi) {
            int mid = lo + (hi-lo)/2;
            if(arr.get(mid) <= val) {
                lo = mid + 1;
            } else {
                hi = mid - 1;
            }
        }
        
        if(lo == arr.size())
            arr.add(val);
        else
            arr.set(lo , val);
        
        //System.out.println(arr);
        return lo+1;
       
    }
}