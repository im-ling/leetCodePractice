class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] obstacles) {
        int[] res = new int[obstacles.length];
        List<Integer> list = new ArrayList<>();
        list.add(obstacles[0]);
        res[0] = 1;
        for (int i = 1; i < obstacles.length; i++) {
            int n = obstacles[i];
            if (n >= list.get(list.size() - 1)) {
                list.add(n);
                res[i] = list.size();
            } else {
                // find first > n
                int left = 0, right = list.size() - 1, index = -1;
                while (left <= right) {
                    int mid = (left + right) >> 1;
                    if (list.get(mid) > n) {
                        if (mid == 0 || list.get(mid - 1) <= n) {
                            index = mid;
                            break;
                        } else {
                            right = mid - 1;
                        }
                    } else {
                        left = mid + 1;
                    }
                }
                list.set(index, n);
                res[i] = index + 1;
            }
        }
        return res;
    }
}