class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] obstacles) {
        int n = obstacles.length;
        int[] ans = new int[n];
        int[] nums = new int[n];
        int end = 0;
        ans[0] = 1;
        nums[0] = obstacles[0];
        for (int i = 1; i < n; ++i) {
            int target = obstacles[i];
            if (nums[end] <= target) {
                nums[++end] = target;
                ans[i] = end + 1;
                continue;
            }
            int l = 0, r = end;
            while (l <= r) {
                int m = (r - l) / 2 + l;
                if (nums[m] <= target) {
                    l = m + 1;
                } else {
                    r = m - 1;
                }
            }
            nums[l] = target;
            ans[i] = l + 1;
        }
        return ans;
    }
    
    //[0, end]
    private int findFirstGt(int[] nums, int end, int target) {
        if (nums[end] <= target) {
            nums[end + 1] = target;
            return end + 1;
        }
        int l = 0, r = end;
        while (l <= r) {
            int m = (r - l) / 2 + l;
            if (nums[m] <= target) {
                l = m + 1;
            } else {
                r = m - 1;
            }
        }
        nums[l] = target;
        return l + 1;
    }
    // [3, 3, 3 ,1,5,6,4,2]
    //  1 2 3 4 6 
    //
}