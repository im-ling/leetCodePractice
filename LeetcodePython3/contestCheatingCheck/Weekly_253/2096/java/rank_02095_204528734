class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] array) {
        // init
        int n = array.length;
        int[] dp = new int[n];
        int[] minEnd = new int[n];
        for (int i = 0; i < n; i++) {
            minEnd[i] = Integer.MAX_VALUE;
        }


        // compute dp[i]
        for (int i = 0; i < n; i++) {
            // binary search expanded LIS and set dp[i]
            int expandedLen = binarySearch(minEnd, i, array[i]) - 1 + 1; // which length should expand?
            dp[i] = expandedLen + 1;
            // don't forget to update minEnd[]
            minEnd[expandedLen] = array[i];
        }

        // find max dp[i]
        int lis = 1;
        for (int i : dp) {
            if (i > lis) lis = i;
        }

        return dp;
    }
    
    private int binarySearch(int[] array, int n, int key) {
        int first = 0, last = n;
        while (first < last) {
            int mid = first + (last - first) / 2;
            if (array[mid] <= key) {
                first = mid + 1;
            } else {
                last = mid;
            }
        }
        return first;
    }
}