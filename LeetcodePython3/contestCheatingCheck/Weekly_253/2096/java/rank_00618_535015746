class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] nums) {
        int n = nums.length;
        int[] ans = new int[n];
        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            if (list.isEmpty() || list.get(list.size() - 1) <= nums[i]) {
                list.add(nums[i]);
                ans[i] = list.size();
            } else {
                int idx = helper(list, nums[i]);
                ans[i] = idx + 1;
                list.set(idx, nums[i]);
            }
        }
        return ans;
    }
    
    // find the smallest idx that list.get(idx) > target;
    private int helper(List<Integer> list, int target) {
        int ans = -1, left = 0, right = list.size() - 1;
        while (left <= right) {
            int mid = (left + right) / 2;
            if (list.get(mid) > target) {
                ans = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return ans;
    }
}