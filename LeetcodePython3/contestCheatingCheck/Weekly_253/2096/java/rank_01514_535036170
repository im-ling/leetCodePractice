class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] obstacles) {
        // Stack<Integer> stack = new Stack<>();
        // // 维护一个递增的单调栈
        // int[] ans = new int[obstacles.length];
        // for (int i = 0; i < obstacles.length; i++) {
        //     int val = obstacles[i];
        //     if (stack.isEmpty() || val >= stack.peek()) {
        //         stack.push(val);
        //     } else {
        //         while (!stack.isEmpty() && stack.peek() > val) {
        //             stack.pop();
        //         }
        //         stack.push(val);
        //     }
        //     System.out.println(stack);
        //     ans[i] = stack.size();
        // }
        // return ans;
        
        
        LinkedList<Integer> list = new LinkedList<>();
        int[] ans = new int[obstacles.length];
        
        ans[0] = 1;
        list.add(obstacles[0]);
        for (int i = 1; i < obstacles.length; i++) {
            int val = obstacles[i];
            if (list.getLast() <= val) {
                list.addLast(val);
                ans[i] = list.size();
            } else {
                int index = search(list, val);
                list.set(index, val);
                ans[i] = index + 1;
            }
        }
        return ans;    
    }
    
    // 自小比val大的
    int search(LinkedList<Integer> list, int val) {
        
//         System.out.println(list);
//         System.out.println(val);
        
        int start = 0;
        int end = list.size() - 1;
        
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (list.get(mid) <= val) {
                start = mid;
            } else {
                end = mid;
            }
        }
        
        // System.out.println(start);
        
        if (list.get(start) > val) {
            return start;
        }
        if (list.get(end) > val) {
            return end;
        }
        
        return -1;
        
    }
    
}