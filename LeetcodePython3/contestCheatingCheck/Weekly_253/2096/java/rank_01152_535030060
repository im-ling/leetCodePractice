class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] obstacles) {
        // binary search
        // Time: O(n log n)
        // keep a sorted array where the index represent the length and value is the minimum height
        int n = obstacles.length;
        
        int[] memo = new int[n + 1];
        Arrays.fill(memo, Integer.MAX_VALUE);
        
        int l = 0;
        int[] res = new int[n];
        for (int i = 0; i < n; i++) {
            int obs = obstacles[i];
            int j = findPositionToInsert(memo, l, obs);
            if (j == l) l++;
            memo[j] = obs;
            res[i] = j + 1;
        }
        
        return res;
    }
    
    private int findPositionToInsert(int[] arr, int n, int val) {
        if (n == 0) return 0;
        if (val < arr[0]) return 0;
        if (val >= arr[n - 1]) return n;
        
        int lo = 0;
        int hi = n - 1;
        while (lo < hi) {
            int mid = lo + (hi - lo) / 2;
            if (arr[mid] <= val) {
                lo = mid + 1;
            } else {
                hi = mid;
            }
        }
        
        return lo;
    }
}