import java.util.Arrays;

class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] obstacles) {
        int n = obstacles.length;

        int[] res = new int[n];
        int[] dp = new int[n + 1];
        int cnt = 1;
        dp[cnt] = obstacles[0];
        res[0] = 1;
        for (int i = 1; i < n; i++) {
            if (dp[cnt] <= obstacles[i]) {
                dp[++cnt] = obstacles[i];
                res[i] = cnt;
            } else {
                int l = 1;
                int r = cnt;
                while (l < r) {
                    int mid = (l + r) / 2;
                    if (dp[mid] > obstacles[i]) {
                        r = mid;
                    } else {
                        l = mid + 1;
                    }
                }
                if (dp[r] == obstacles[i]) {
                    dp[r + 1] = obstacles[i];
                    res[i] = r + 1;
                } else {
                    dp[r] = obstacles[i];
                    res[i] = r;
                }


            }
        }
        return res;
    }

    public static void main(String[] args) {
        Solution s = new Solution();
        s.longestObstacleCourseAtEachPosition(new int[]{5, 1, 5, 5, 1, 3, 4, 5, 1, 4});
    }
}