class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] obstacles) {
        int l = obstacles.length;
        int[] a = obstacles;
        int[] ans = new int[l];
        ans[0] = 1;
        int[] temp = new int[l];
        temp[0] = a[0];
        int len = 1;
        for(int i = 1;i < l;i++){
            int currLen = binSearch(temp, a[i],len);
            ans[i] = currLen + 1;
            len = Math.max(len,ans[i]);
            temp[currLen] = a[i];
        }
        return ans;
        
    }
    private int binSearch(int[] nums, int target ,int r){
        if(target < nums[0]){
            return 0;
        }
        int ans = r;
        int l = 0;
        while(l <= r){
            int mid = (l + r)/2;
            if(nums[mid] > target){
                ans = mid;
                r = mid - 1;
            }else{
                l = mid + 1;
            }
        }
        return ans;
    }
}