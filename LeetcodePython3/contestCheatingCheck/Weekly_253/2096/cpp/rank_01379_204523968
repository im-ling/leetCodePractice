class Solution {
public:
    static const int N=100005;
    vector<int>t;
    int lowbit(int x)
    {
        return x&-x;
    }
    void add(int x,int k)
    {
        for(;x<N;x+=lowbit(x)) t[x]+=k;
    }
    int query(int x)
    {
        int ans=0;
        for(;x;x-=lowbit(x)) ans+=t[x];
        return ans;
    }
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& nums) {
    int len = 1, n = (int)nums.size();
        
        vector<int> d(n + 1, 0),res(n);
        res[0]=1;
        d[len] = nums[0];
        for (int i = 1; i < n; ++i) {
            if (nums[i] >= d[len]) {
                d[++len] = nums[i];
                res[i]=len;
            } else {
                int l = 1, r = len, pos = 0; // 如果找不到说明所有的数都比 nums[i] 大，此时要更新 d[1]，所以这里将 pos 设为 0
                while (l <= r) {
                    int mid = (l + r) >> 1;
                    if (d[mid] < nums[i]) {
                        pos = mid;
                        l = mid + 1;
                    } else {
                        r = mid - 1;
                    }
                }
                int id=pos+1;
                while(d[id]==nums[i]) id++;
                d[id] = nums[i];
                res[i]=id;
            }
        }
       return res;
    }
};