class Solution {
public:
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& arr) {
        // multiset<int> dp;
        vector<int> dp1;
        int n = arr.size();
        vector<int> ans(n, 1);
        if(n==0)
            return ans;
        // dp.insert(arr[0]);
        dp1.push_back(arr[0]);
        for(int i  =1;i<n;i++)
        {
            int nn = arr[i];
            // if(nn>= *dp.rbegin())
            // {
            //     dp.insert(nn);
            //     ans[i] = dp.size();
            // }
            if(nn>= dp1.back())
            {
                dp1.push_back(nn);
                ans[i] = dp1.size();
            }
            else
            {
                auto it = upper_bound(dp1.begin(), dp1.end(), nn);
                // int dist = distance(dp.begin(),it);
                int dist = it-dp1.begin();
                ans[i] = dist+1;
                // dp[idx] = arr[i];
                dp1[dist] = nn;
                // dp.erase(it);
                // dp.insert(nn);
            }
        }
        return ans;
    }
};