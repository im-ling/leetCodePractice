class Solution {
public:
    class SegTreeNode
    {
        public:
        SegTreeNode* left;
        SegTreeNode* right;
        int start, end;
        int info;        
        SegTreeNode(int a, int b):start(a),end(b),info(0),left(NULL),right(NULL){}
    };
    
    void init(SegTreeNode* node, int a, int b)  // init for range [a,b]
    {                        
        if (a==b)
        {
            node->info = 0;
            return;
        }
        int mid = (a+b)/2;
        if (node->left==NULL)
        {
            node->left = new SegTreeNode(a, mid);
            node->right = new SegTreeNode(mid+1, b);
        }
        init(node->left, a, mid);
        init(node->right, mid+1, b);
                
        node->info = max(node->left->info , node->right->info);  // write your own logic
    }
    
    void updateSingle(SegTreeNode* node, int id, int val)
    {        
        if (id < node->start || id > node->end ) return;
        if (node->start == node->end)
        {
            node->info = max(node->info,val);
            return;
        }
        updateSingle(node->left, id, val);
        updateSingle(node->right, id, val);
        node->info = max(node->left->info , node->right->info);  // write your own logic
    }
    
    int queryRange(SegTreeNode* node, int a, int b)
    {
        if (b < node->start || a > node->end )
        {
            return 0;  // write your own logic
        }
        if (a <= node->start && b>=node->end)
        {
            return node->info;  // write your own logic
        }        
        return max(queryRange(node->left, a, b) , queryRange(node->right, a, b));  // write your own logic
    }    
    
    vector<int> nums;
    SegTreeNode* root;
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& arr) 
    {
        int n=arr.size();
        set<int>Set(arr.begin(),arr.end());
        unordered_map<int,int>Map;
        for(auto &x:Set)Map[x]=Map.size();
        nums.resize(n);
        for(int i=0;i<n;i++)nums[i]=Map[arr[i]];
        root=0;
        root=new SegTreeNode(0,Map.size());
        init(root,0,Map.size());
        vector<int>ans(n);
        for(int i=0;i<n;i++)
        {
            int res=queryRange(root,0,nums[i]);
            ans[i]=res+1;
            updateSingle(root,nums[i],ans[i]);
        }
        return ans;
    }
};