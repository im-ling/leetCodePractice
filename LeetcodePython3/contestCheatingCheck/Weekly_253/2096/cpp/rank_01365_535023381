class Solution {
    vector<int> res;
    
    vector<int> findLIS(vector<int> &nums) {
        vector<int> lis(nums.size());
        multimap<int, int> mp;
        mp.insert({INT_MAX, -1});

        for (int i = 0; i < nums.size(); i++) {
            int x = nums[i];
            auto it = mp.upper_bound(x);
            int ind;

            if (it == mp.begin()) {
                ind = 1;
                mp.insert({x, max(ind, it->second)});
                mp.erase(it);
            } else {
                int zind = INT_MIN;
                if (it != mp.end()) {
                    // z = it->first;
                    zind = it->second;
                }
                auto tit = it;
                tit--;
                ind = tit->second+1;
                mp.insert({x, max(ind, zind)});
                if(it != mp.end())
                    mp.erase(it);
            }
            
//             cout << x <<" " << endl;
//             for (auto q: mp) {
//                 cout << q.first << ":" << q.second << " ";
                
//             }
//             cout << endl;
            
            lis[i] = ind;
        }

        return lis;
    }
public:
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {
        // res.resize(obstacles.size());
        auto res = findLIS(obstacles);
        return res;
    }
};