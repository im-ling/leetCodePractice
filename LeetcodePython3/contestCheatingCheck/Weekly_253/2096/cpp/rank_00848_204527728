const int N = 1e5 + 10;

class Solution {
public:
    int tr[N], n;
    vector<int> alls;
    
    int lowbit(int x){ return x & -x; }
    void add(int x, int val){
        for(int i = x;i <= n;i += lowbit(i)) tr[i] = max(tr[i], val);
    }
    int query(int x){
        int res = 0;
        for(int i = x;i;i -= lowbit(i)) res = max(res, tr[i]);
        return res;
    }
    int get(int val){
        return lower_bound(alls.begin(), alls.end(), val) - alls.begin();
    }
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {
        n = obstacles.size();
        alls.clear(); alls.push_back(0);
        for(auto &t: obstacles) alls.push_back(t);
        sort(alls.begin(), alls.end());
        alls.erase(unique(alls.begin(), alls.end()), alls.end());
        
        memset(tr, 0, sizeof tr);
        // for(int i = 0;i < alls.size();i ++ ) cout << alls[i] << ' ';
        // cout << endl;
        vector<int> dp(n + 1, 0);
        vector<int> res; res.clear();
        for(int i = 0;i < n; ++ i){
            int id = get(obstacles[i]);
            dp[id] = query(id) + 1;
            // cout << id << ' ' << query(id) << endl;
            res.push_back(dp[id]);
            add(id, dp[id]);
        }
        // cout << endl;
        return res;
    }
};