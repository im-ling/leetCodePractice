class Solution {
public:
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {
        int len = 1, n = (int)obstacles.size();
        if (n == 0) {
            return {};
        }
        vector<int> d(n + 1, 0);
        d[len] = obstacles[0];
        vector<int> ret{1};
        for (int i = 1; i < n; ++i) {
            // for (int v: d) {
            //     cout << v << ' ';
            // }
            //cout << endl;
            //cout << obstacles[i] << endl;
            if (obstacles[i] >= d[len]) {
                d[++len] = obstacles[i];
                ret.push_back(len);
            } else {
                int l = 1, r = len, pos = 0; 
                while (l <= r) {
                    int mid = (l + r) >> 1;
                   // cout << "mid" << mid << ' ' << d[mid] << endl;
                    if (d[mid] <= obstacles[i]) {
                        pos = mid;
                        l = mid + 1;
                    } else {
                        r = mid - 1;
                    }
                }
                ret.push_back(pos + 1);
                d[pos + 1] = obstacles[i];
            }
        }
        return ret;
    }
};