class Solution {
public:
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {
        
        map<int,int> m;
        
        int n = obstacles.size();
        vector<int> ret;
        for(int i=0;i<n;i++){
            int r = 1;
            if(m.empty()){
                m[obstacles[i]] = 1;
                ret.push_back(r);
                continue;
            }
            
            auto it = m.lower_bound(obstacles[i]);
            if(it == m.end()){
                r = (--it)->second + 1;
            }else if(it->first > obstacles[i] && it == m.begin()){
                r = 1;
            }else if(it->first == obstacles[i]){
                r = it->second + 1;
            }else{
                r = (--it)->second + 1;
            }
            
            
            // for(auto it = m.begin();it!=m.end();it++){
            //     if(it->first > obstacles[i]) break;
            //     r = max(it->second+1,r);
            // }
            ret.push_back(r);
            m[obstacles[i]] = r;
            
            it = m.upper_bound(obstacles[i]);
            while(it != m.end() && it->second < r){
                it->second = r;
                it++;
            }
        }
        return ret;

    }
};