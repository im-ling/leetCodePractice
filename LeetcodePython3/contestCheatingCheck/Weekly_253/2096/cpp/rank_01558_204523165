class Solution {
public:
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& os) {
        int n = os.size();
        vector<int> d = vector<int>(n + 1);
        int len = 1;
        d[len] = os[0];
        vector<int> ans;
        ans.push_back(len);
        for (int i = 1; i < n; i++) {
            // cout << i << " " << os[i] << endl;
            // for (int j = 1; j <= len; j++) cout << "##" << d[j] << " ";
            // cout << endl;
            
            if (os[i] >= d[len]) {
                d[++len] = os[i];
                ans.push_back(len);
            } else {
                int l = 1, r = len;
                while (l < r) {
                    int m = (l + r) / 2;
                    if (d[m] <= os[i]) { // 
                        l = m + 1;
                    } else {
                        r = m;
                    }
                }
                d[l] = os[i];
                ans.push_back(l);
            }
        }
            
        return ans;
    }
};