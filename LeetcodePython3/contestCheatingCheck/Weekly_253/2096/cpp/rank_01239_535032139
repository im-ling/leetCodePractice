class Solution {
public:
    int CeilIndex(std::vector<int>& v, int l, int r, int key)
    {
        int ans = -1;
        while(l<=r)
        {
            int mid = (l+r)/2;
            if(v[mid]<key) 
            {
                l = mid + 1;
            }
            else if(v[mid]>key)
            {
                ans = mid;
                r = mid - 1;
            }
            else if(v[mid]==key)
            {
                l = mid+1;
            }
        }

        return ans;
    }
 
    vector<int> LongestIncreasingSubsequenceLength(std::vector<int>& v)
    {
        vector<int> ans;
        if (v.size() == 0) return ans;
        std::vector<int> tail(v.size(), 0);
        ans.push_back(1);
        int length = 1; 

        tail[0] = v[0];
        for (int i = 1; i < v.size(); i++) 
        {
            if (v[i] < tail[0]) 
            {
                tail[0] = v[i];
                ans.push_back(1);
            }
            else if (v[i] >= tail[length - 1]) 
            {
                tail[length++] = v[i];
                ans.push_back(length);
            }
            else 
            {
                int ind = CeilIndex(tail, 0, length - 1, v[i]);
                tail[ind] = v[i];
                ans.push_back(ind+1);
            }
        }

        return ans;
    }
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& arr) 
    {
        int n = arr.size();
        vector<int> ans;
        
        if(n==0) return ans;
        
        return LongestIncreasingSubsequenceLength(arr);
    }
};