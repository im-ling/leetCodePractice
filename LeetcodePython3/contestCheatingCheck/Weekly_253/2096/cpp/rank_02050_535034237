class Solution {
public:
    
    
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& o) {
        vector<int> r;
        vector<int> t;
        
        for(int i = 0; i < o.size(); i++){
            
            auto it = upper_bound(t.begin(), t.end(), o[i]);
            if(it == t.end()){
                t.push_back(o[i]);
                r.push_back(t.size());
            }else{
                r.push_back(it-t.begin() + 1);
                *it = o[i];
            }
        }
                
        return r;
    }
    
    
    
//     vector<int> longestObstacleCourseAtEachPosition(vector<int>& o) {
//         vector<int> r;
//         stack<int> st;
        
//         for(int i = 0; i < o.size(); i++){
            
//             while(st.size() && (o[st.top()] > o[i])){
//                 st.pop();
//             }
//             r.push_back(st.size()+1);
//             st.push(i);
//         }
                
//         return r;
//     }
};