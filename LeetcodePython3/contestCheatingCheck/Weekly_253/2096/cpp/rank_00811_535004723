class Solution {
public:
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {
        vector<int> p;
        vector<int> ans;
        int n = obstacles.size();
        for (int i = 0; i < n; ++i) {
            if (p.empty()) {
                p.push_back(obstacles[i]);
                ans.push_back(1);
                continue;
            }
            int l = 0, r = p.size() - 1;
            while (l < r) {
                int mid = (l + r + 1) >> 1;
                if (p[mid] <= obstacles[i]) {
                    l = mid;
                } else {
                    r = mid - 1;
                }
            }
            if (p[l] <= obstacles[i]) {
                if (l == p.size() - 1) {
                    p.push_back(obstacles[i]);
                    ans.push_back(p.size());
                } else {
                    p[l + 1] = min(p[l + 1], obstacles[i]);
                    ans.push_back(l + 2);
                }
            } else {
                p[0] = min(p[0], obstacles[i]);
                ans.push_back(1);
            }
        }
        return ans;
    }
};