const int maxn=1e7+10;
struct node{
    int l,r,len;
}tree[maxn<<2];
#define lson (rt<<1)
#define rson (rt<<1|1)
void push_up(int rt){
    tree[rt].len=max(tree[lson].len,tree[rson].len);
}
void build(int l,int r,int rt){
    tree[rt].l=l,tree[rt].r=r;
    if(l==r){
        tree[rt].len=0;
        return ;
    }
    int m=(l+r)>>1;
    build(l,m,lson);
    build(m+1,r,rson);
    push_up(rt);
}

int query(int ql,int qr,int rt){
    int l=tree[rt].l,r=tree[rt].r;
    if(ql<=l&&r<=qr){
        return tree[rt].len;
    }
    int m=(l+r)>>1;
    int res=0;
    if(ql<=m)res=max(res,query(ql,qr,lson));
    if(qr>m)res=max(res,query(ql,qr,rson));
    push_up(rt);
    return res;
}

void modify(int tar,int rt,int val){
    int l=tree[rt].l,r=tree[rt].r;
    if(l==r){
        tree[rt].len=val;
        return ;
    }
    int m=(l+r)>>1;
    if(tar<=m)modify(tar,lson,val);
    else modify(tar,rson,val);
    push_up(rt);
}

class Solution {
public:
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {
        vector<int>res(obstacles.size());
        int mx=0;
        for(auto x:obstacles)mx=max(mx,x);
        build(1,mx,1);
        for(int i=0;i<obstacles.size();++i){
            int now=obstacles[i];
            int len=query(1,now,1)+1;
            res[i]=len;
            modify(now,1,len);
        }
        return res;
    }
};