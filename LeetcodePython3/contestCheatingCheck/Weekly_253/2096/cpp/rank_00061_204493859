const int N  = 1e5 + 10;
class Solution {
public:
    unordered_map<int, int> m;
    int n, tr[N];
    int lowbit(int x) { return x & - x; }
    void update(int x, int d) {
        for(int i = x; i <= n; i += lowbit(i)) tr[i] = max(tr[i], d);
    }
    int get(int x)
    {
        int res = 0;
        for(int i = x; i; i -= lowbit(i)) res = max(res, tr[i]);
        return res;
    }
    
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& a) {
        vector<int> vs = a;
        sort(vs.begin(), vs.end());
        vs.erase(unique(vs.begin(), vs.end()), vs.end());
        for(int i = 0; i < vs.size(); i++) m[vs[i]] = i + 1;
        n = vs.size();
        vector<int> f(int(a.size()));
        for(int i = 0; i < a.size(); i++)
        {
            int v = m[a[i]];
            f[i] = get(v) + 1;
            update(v, f[i]);
        }
        return f;
    }
};