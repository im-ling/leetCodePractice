class Solution {
public:
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {

        vector<int> length_list(obstacles.size(),0);
/*
        for(int i = 0; i < obstacles.size(); i++) {
            int max_length = 0;
            for(int j = i-1; j >= 0; j--) {
                if(j < max_length) break;
                if(obstacles[j] <= obstacles[i] && length_list[j] > max_length)
                    max_length = length_list[j];
                
            }
            length_list[i] = max_length+1;
        }
        
        return length_list;
*/        

        int len = 1, n = obstacles.size();
        vector<int> d(n + 1, 0);
        d[len] = obstacles[0];
        length_list[0] = len;
        for (int i = 1; i < n; ++i) {
            if (obstacles[i] >= d[len]) {
                d[++len] = obstacles[i];
                length_list[i] = len;
            } else {
                int l = 1, r = len, pos = 0; // 如果找不到说明所有的数都比 nums[i] 大，此时要更新 d[1]，所以这里将 pos 设为 0
                while (l <= r) {
                    int mid = (l + r) >> 1;
                    if (d[mid] <= obstacles[i]) {
                        pos = mid;
                        l = mid + 1;
                    } else {
                        r = mid - 1;
                    }
                }
                d[pos + 1] = obstacles[i];
                length_list[i] = pos+1;
            }
        }
        
        
        return length_list;

    }
};