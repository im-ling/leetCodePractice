class Solution {
public:
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {
        vector<int> dp(obstacles.size(), 1);
        // priority_queue<int>
        // dp[0] = 1;
        vector<int> incr(obstacles.size(), 0);
        int len = 0;
        incr[0] = obstacles[0];
        for(int i=1;i<obstacles.size();i++){
            if(obstacles[i] >= incr[len]){
                incr[++len] = obstacles[i];
                dp[i] = len+1;
            }
            else{
                int l = 0, r = len;
                while(l <= r){
                    int mid = (l+r)/2;
                    if(incr[mid] <= obstacles[i]){
                        l = mid + 1;
                    }else{
                        r = mid - 1;
                    }
                }
                // cout << l << endl;
                incr[l] = obstacles[i];
                dp[i] = l+1;
            }
        }
        return dp;
    }
    
};