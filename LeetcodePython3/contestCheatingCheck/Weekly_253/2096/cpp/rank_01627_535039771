class Solution {
  int CeilIndex(std::vector<int>& v, int l, int r, int key)
{
    while (r - l > 1) {
        int m = l + (r - l) / 2;
        if (v[m] > key)
            r = m;
        else
            l = m;
    }
 
    return r;
}
public:
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& v) {
      vector<int>dp(v.size(),1);
      if (v.size() == 0)
        return dp;

      // vector<int>dp(v.size(),1);
    std::vector<int> tail(v.size(), 0);
    int length = 1; // always points empty slot in tail
 
    tail[0] = v[0];
    for (size_t i = 1; i < v.size(); i++) {
 
        // new smallest value
      // cout<<tail[length-1]<<" "<<v[i]<<" "<<dp[length-1]<<endl;
        if (v[i] < tail[0])
            tail[0] = v[i];
        else if (v[i] >= tail[length - 1])
            tail[length] = v[i],dp[i]=length+1,length++;
        else{
          int k=CeilIndex(tail, -1, length - 1, v[i]);
          dp[i]=k+1;
            tail[k] = v[i];}
    }
      return dp;
    }
};