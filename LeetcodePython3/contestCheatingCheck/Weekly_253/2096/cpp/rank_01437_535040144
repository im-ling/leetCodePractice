class Solution {
public:
    vector<int> LongestIncreasingSubsequenceLength(std::vector<int>& v)
    {
        if (v.size() == 0) // boundry case
            return {};

        vector<int> tail(v.size(), 0);
        vector<int> ans(v.size(), 1);
        int length = 1; // always points empty slot in tail

        tail[0] = v[0];

        for (int i = 1; i < v.size(); i++) {

            // Do binary search for the element in
            // the range from begin to begin + length
            auto b = tail.begin(), e = tail.begin() + length;
            auto it = upper_bound(b, e, v[i]);

            // If not present change the tail element to v[i]
            if (it == e ){
                tail[length++] = v[i];
                ans[i] = length;
            }else{
                *it = v[i];
                ans[i] = it-b+1;
            }
                
            
        }
        
        return ans;
    }
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {
        return LongestIncreasingSubsequenceLength(obstacles);
    }
};