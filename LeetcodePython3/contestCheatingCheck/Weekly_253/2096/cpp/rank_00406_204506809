const int N = 100010;
class Solution {
public:
    #define ls o<<1
    #define rs ls|1
    int O[N<<2],A[N],B[N],n,m;
    void update(int o,int l,int r,int x,int v){
        if(l==r){
            O[o] = max(O[o],v);
            return;
        }
        int mid = l+(r-l)/2;
        if(x<=mid)update(ls,l,mid,x,v);
        else update(rs,mid+1,r,x,v);
        O[o] = max(O[ls],O[rs]);
    }
    int query(int o,int l,int r,int x){
        if(x>=r)return O[o];
        int mid = l+(r-l)/2;       
        if(x<=mid)return query(ls,l,mid,x);
        else{
            return max(query(ls,l,mid,x),query(rs,mid+1,r,x));
        }
    }
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obs) {
        n = obs.size();
        for(int i=1;i<=n;i++)A[i] = B[i] = obs[i-1];
        sort(B+1,B+1+n);
        m = unique(B+1,B+1+n)-B-1;
        vector<int> ans;
        for(int i=1;i<=n;i++){
            int t = 1,u = lower_bound(B+1,B+1+m,A[i])-B;
            t += query(1,1,m,u);
            update(1,1,m,u,t);
            ans.push_back(t);
        }
        return ans;
    }
};