class Solution {
public:
    vector<int> LIS(vector<int>a,int n)
    {
        int potential[n+1];
        memset(potential,1e9,sizeof potential);
        int dp[n+1];
        memset(dp,0,sizeof dp);
        int length = 0;
        for(int i=0;i<n;i++)
        {
            int low = 1;
            int high = length;

            while(low<=high)
            {
                int m = (low + high)/2;

                if(a[potential[m]] <= a[i])
                    low = m+1;
                else
                    high = m - 1;
            }
            int pos = low;
            potential[pos] = i;
            dp[i] = pos;
            length = max(length,pos);
        }
        vector<int> ans;
        for(int i=0;i<n;i++)
        {
            ans.push_back(dp[i]);
        }
        return ans;


    }
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& nums) {
        return LIS(nums,nums.size());
    }
};