class Solution {
public:
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {
        int n = obstacles.size();
        vector<int> asc;
        vector<int> v(n);
        asc.push_back(obstacles[0]);
        v[0] = 1;
        for(int i = 1; i<n; i++){
            // for(auto a:asc) cout<<a<<" "; cout<<endl;
            if (asc.back()<=obstacles[i]) {
                asc.push_back(obstacles[i]);
                v[i] = asc.size();
            }
            else{
                int left = 0; int right = asc.size()-1; int mid; int r = asc.back();
                while(left <= right){
                    mid = left+(right-left)/2;
                    if (asc[mid]>obstacles[i]){
                        r = mid;
                        right = mid-1;
                    }
                    else{
                        left = left+1;
                    }
                }
                asc[r] = obstacles[i];
                v[i] = r+1;
            }
        }
        return v;
        
    }
};