class Solution {
public:
    
    int findIndex(vector<int>& v, int l, int r, int key) {
        while (r - l > 1) {
            int m = l + (r - l) / 2;
            if (v[m] > key)
                r = m;
            else
                l = m;
        }
        return r;
    }
 
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {    
        int n = obstacles.size();
        vector<int> tail(n, 0), res(n, 1);
        int l = 1;

        tail[0] = obstacles[0];
        for (int i = 1; i < n; i++) {
            if (obstacles[i] < tail[0]) {
                tail[0] = obstacles[i];
                res[i] = 1;
            } else if (obstacles[i] >= tail[l - 1]) {
                tail[l++] = obstacles[i];
                res[i] = l;
            }
            else {
                int x = findIndex(tail, -1, l - 1, obstacles[i]);   
                res[i] = x + 1;
                tail[x] = obstacles[i];
            }
            
        }
        
        return res;
    }
};
