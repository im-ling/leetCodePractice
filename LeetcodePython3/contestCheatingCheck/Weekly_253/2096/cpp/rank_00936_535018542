class Solution {
public:
    int insertAndGetLength(vector<int>& top, int current) {
        int l=0, r=top.size()-1;
        while (l <= r) {
            int mid=(l+r)/2;
            if (current >= top[mid]) {
                l = mid+1;
            } else {
                r = mid-1;
            }
        }
        // cout << l << endl;
        if (l < top.size()) {
            top[l] = current;
        } else {
            top.push_back(current);
        }
        // buckets.emplace_back(vector{current});
        return l+1;
    }
    
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {
        // vector<vector<int>> buckets;
        vector<int> top;
        vector<int> result;
        for (int o:obstacles) {
            result.push_back(insertAndGetLength(top, o));
        }
        return result;
    }
};