class Solution {
public:
    int BIT[100111];
    int N;
    void update(int idx,int val){
        for(int i=idx;i<=N;i+=(i&(-i))) BIT[i]=max(BIT[i],val);
    }
    int query(int idx){
        int res = 0;
        for(int i=idx;i>0;i-=(i&(-i))) res=max(res,BIT[i]);
        return res;
    }
    
    
    vector<int> longestObstacleCourseAtEachPosition(vector<int> obstacles) {
        int n = obstacles.size();
        map<int,vector<int>> mp;
        for(int i=0;i<n;i++) mp[obstacles[i]].push_back(i);
        int cnt = 1;
        for(auto elem : mp){
            for(auto itr : elem.second) obstacles[itr]=cnt;
            cnt++;
        }
        N = n+2;
        
        vector<int> ret;
        for(int i=0;i<n;i++){
            int xval = query(obstacles[i]);
            ret.push_back(xval+1);
            update(obstacles[i],xval+1);
        }
        return ret;
    }
};