class Solution {
    int firstBinaryFind(vector<int> &a, int l, int r, int target) {
        int mid;
        while (l <= r) {
            mid = (l+r)/2;
            if (a[mid] >= target) {
                r = mid-1;
            } else {
                l = mid + 1;
            }
        }
        
        return r + 1;
    }
    int lastBinaryFind(vector<int> &a, int l, int r, int target) {
        int mid;
        while (l <= r) {
            mid = (l+r)/2;
            if (a[mid] > target) {
                r = mid-1;
            } else {
                l = mid + 1;
            }
        }
        
        return l - 1;
    }
    int lastBinaryFind2(vector<int> &a, int l, int r, int target) {
        int mid;
        while (l <= r) {
            mid = (l+r)/2;
            if (a[mid] > target) {
                r = mid-1;
            } else {
                l = mid + 1;
            }
        }
        
        return l;
    }
public:
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {
        vector<int> ret;
        int n = obstacles.size();
        int lastNum = -1;
        int hLen = 0;
        vector<int> h(n+1, 0);
        for (int i = 0; i < n;++i) {
            int tmpPos = 0;
            if (obstacles[i] >= h[hLen]) {
                h[++hLen] = obstacles[i];
                lastNum =  obstacles[i];
                tmpPos = hLen;
            } else {
                int pos = lastBinaryFind2(h, 1, hLen, obstacles[i]);
                h[pos] = obstacles[i];
                tmpPos = pos;
            }
            
            ret.emplace_back(tmpPos);
        }
        
        return ret;
    }
};