class Solution {
private:
    int getCeil(vector<int>& v, int l, int r, int key)
    {
        while (r - l > 1) {
            int m = l + (r - l) / 2;
            if (v[m] > key)
                r = m;
            else
                l = m;
        }
        return r;
    }

    void solve(vector<int>& v, vector<int> &r)
    {
        vector<int> tail(v.size(), 0);
        int l = 1;

        tail[0] = v[0];
        r[0] = 1;
        for (int i = 1; i < v.size(); i++) {
            if (v[i] < tail[0]) {
                tail[0] = v[i];
                r[i] = 1;
            }

            else if (v[i] >= tail[l - 1]) {
                tail[l] = v[i];
                r[i] = l + 1;
                l++;
            }
            else {
                int ind = getCeil(tail, -1, l - 1, v[i]);
                tail[ind] = v[i];
                r[i] = ind + 1;
            }
        }
    }
public:
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {
        vector<int> r(obstacles.size());
        solve(obstacles, r);
        return r;
    }
};