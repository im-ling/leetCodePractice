class Solution {
public:
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obs) {
        int n = obs.size();
        
        vector<int> dp(n, 0);
        
        // for(int i=0;i<n;i++){
        //     dp[i] = 1;
        //     for(int j=i-1;j>=0;j--){
        //         if(obs[j] <= obs[i] && dp[i] < dp[j] + 1){
        //             dp[i] = dp[j] + 1;
        //         }
        //     }
        // }
        
        vector<int> t;
        int ans = 0;
        for(int k=0;k<n;k++){
            int i =0;
            int j=ans;
            int val = obs[k];
            
            while(i<j){
                int mid = i + (j-i)/2;
                // cout << mid << " " << dp[mid] << " " << val << " ";
                if(dp[mid] <= val){
                    // cout << "#" << endl;
                    i = mid+1;
                }
                else{
                    // cout << "@" << endl;
                    j=mid;
                }
            }
            // while(i <ans && dp[i] == val){
            //     i++;
            // }
            // cout << k << " " << i << " " << val <<endl;
            dp[i] = val;
            if(i == ans){
                ans++;
            }
            t.push_back(i+1);
        }
        return t;
    }
};