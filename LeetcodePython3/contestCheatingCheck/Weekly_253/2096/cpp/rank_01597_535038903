#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define pi pair<int, int>
#define ordered_set tree<pi, null_type,less<pi>, rb_tree_tag,tree_order_statistics_node_update>

class Solution {
public:
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {
        
        vector<int> v;
        
        v.push_back(obstacles[0]);
        
        unordered_map<int, int> mp;
        vector<int> ans;
        mp[obstacles[0]] = 1;
        ans.push_back(1);
        
        for(int i = 1 ; i < obstacles.size(); i++)
        {
            int val = obstacles[i];
            //cout<<val<<" ";
            int ind = upper_bound(v.begin(), v.end(), val) - v.begin();
            cout<<ind<<" \n";
            
            if(ind == v.size()){
                ans.push_back(mp[v[ind-1]] + 1);
                v.push_back(val);
                
                mp[val] = mp[v[ind-1]] + 1;
            }
            else
            {
                if(ind > 0)
                {
                    if(val != v[ind])
                    {
                        ans.push_back(mp[v[ind - 1]] + 1);
                        v[ind] = val;
                        mp[val] = mp[v[ind - 1]] + 1;
                    }
                    else
                    {
                        ans.push_back(mp[ind] + 1);
                        mp[ind] += 1;
                    }
                }
                else
                {
                    mp[val] += 1;
                    ans.push_back(mp[val]);
                    v[ind] = val;
                }
                
            }
        }
        
        return ans;
        
        
    }
};