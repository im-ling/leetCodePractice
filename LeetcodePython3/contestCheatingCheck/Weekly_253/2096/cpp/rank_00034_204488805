typedef vector<int> VI;
typedef pair<int,int> PII;
typedef vector<PII> VPII;

VI LongestIncreasingSubsequence(VI v) {
  VPII best;
  VI dad(v.size(), -1);
    VI dp(v.size(),1);

  for (int i = 0; i < v.size(); i++) {
#ifdef STRICTLY_INCREASNG
    PII item = make_pair(v[i], 0);
    VPII::iterator it = lower_bound(best.begin(), best.end(), item);
    item.second = i;
#else
    PII item = make_pair(v[i], i);
    VPII::iterator it = upper_bound(best.begin(), best.end(), item);
#endif
    if (it == best.end()) {
      dad[i] = (best.size() == 0 ? -1 : best.back().second);
        if (dad[i] != -1){
            dp[i]=dp[dad[i]]+1;
        }
      best.push_back(item);
    } else {
      dad[i] = it == best.begin() ? -1 : prev(it)->second;
      *it = item;
        if(dad[i]!=-1){
            dp[i]=dp[dad[i]]+1;
        }
    }
  }

  return dp;
}

class Solution {
public:
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {
        VI ret = LongestIncreasingSubsequence(obstacles);
        return ret;
    }
};