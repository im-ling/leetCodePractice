bool compare(pair<int,int>p1,pair<int,int>p2){
    if(p1.first!=p2.first){
        return p1.first < p2.first;
        
    }
    
    return p1.second < p2.second;
}



class Solution {
public:
    
    
    int find(int val,vector<int>&dp1){
        int l = 0;
        int h = dp1.size()-1;
        while(l<=h){
            int mid;
            mid = (l+h)/2;
            if(dp1[mid]<=val){
                l = mid + 1;
                continue;
            }
            h = mid -1 ;
        }
        
        return l;
    }
    
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& v) {
        int n =v.size();
       // vector<int>ret(n,1);
     
        
   //     vector<int>v = obstacles;
        
     /*  sort(v1.begin(),v1.end(),compare);
       set<int>st;
        for(int i=0;i<n;i++){
            pair<int,int>p1 = v1[i];
            int val = p1.first;
            int val1 = p1.second;
           auto it = st.lower_bound(val1);
            if(it!=st.begin()){
                 if(it==st.end()){
                     ret[val1] = st.size();
                 }else{
                   //  int ind = it - st.begin();
                     auto diff = it - st.begin(); 
                     cout << *diff << endl;
              //       return ret;
                     ret[val1] = diff-1;
                     
                 }
            }
        }
        */
         
      vector<int>dp(n,1);
        vector<int>dp1;
       // dp[0] = 1;
        //dp1[0] = obstacles[0];
       // int l = 1;
        for(int i=0;i<n;i++){
            if(dp1.size()==0){
                
                dp1.push_back(v[i]);
                
                
            }else{
               int t = find(v[i],dp1);
                if(t==dp1.size()){
                    dp1.push_back(v[i]);
                }else{
                    dp1[t] = min(dp1[t],v[i]);
                    
                }
                    
                    dp[i] = t+ 1;
                }
                
            }
        
   
            
        return dp;
    }
};