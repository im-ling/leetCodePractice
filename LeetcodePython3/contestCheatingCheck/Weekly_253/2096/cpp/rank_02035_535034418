class Solution {
public:
    
    int CeilIndex(vector<int>& v, int l, int r, int key)
    {
        while (r - l > 1) {
            int m = l + (r - l) / 2;
            if (v[m] >= key)
                r = m;
            else
                l = m;
        }

        return r;
    }
    
    
    
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obs) {
        int n = obs.size();
        vector<int> ans(n);
        vector<int> tail(n,0);
        int len = 1;
        tail[0] = obs[0];
        ans[0] = 1;
        for(int i=1 ; i<obs.size(); i++) {
            //cout<<obs[i]<<endl;
            if(obs[i]<tail[0]) {
                ans[i] = 1;
                tail[0] = obs[i]; 
                // cout<<"here 1"<<endl;

            }
            else if(obs[i]>=tail[len-1]) {
                tail[len] = obs[i];
                len++;
                ans[i] = len;
                // cout<<"here 2"<<endl;
            }
            else {
                // cout<<"beech wala hai"<<endl;
                // vector<int>::iterator it = lower_bound(tail.begin(), tail.end(), obs[i]);
//                 for(int i=0 ; i<len ; i++) {
//                     cout<<tail[i]<<" ";
//                 }
//                 cout<<endl;
                
                int pos = CeilIndex(tail,-1, len-1, obs[i]);
                if(tail[pos]==obs[i]) {
                    while(tail[pos]==obs[i]) {
                        pos++;
                    }
                    tail[pos] = obs[i];
                    ans[i]=pos+1;
                }
                else {
                    tail[pos]=obs[i];
                    ans[i]=pos+1;
                }

            }
        }
        //cout<<endl;
        return ans;
    }
};