class Solution {
public:
    int fun(vector<int>dp, int len, int n)
    {
        int left = 1;
        int right = len;
        while (left < right)
        {
            int mid = (left + right) / 2;
            if (dp[mid] > n)
            {
                right = mid;
            }
            else
            {
                left = mid+1;
            }
        }
        return right;
    }
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {
        int n = obstacles.size();
        vector<int>dp(n+1,0);
        dp[1] = obstacles[0];
	    int index = 1;
        vector<int>res(n,1);
	    for (int i = 1; i < n; i++)
	    {
            if (obstacles[i] >= dp[index])
            {
                dp[++index] = obstacles[i];
                res[i] = index;
            }
             else
             {

                int tempIndex = upper_bound(dp.begin(), dp.begin()+index, obstacles[i])-dp.begin();
                dp[tempIndex] = obstacles[i];
                res[i] = tempIndex;
             }
	     }
        return res;
    }
};