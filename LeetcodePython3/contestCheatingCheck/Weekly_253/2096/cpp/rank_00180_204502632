class Solution {
public:
    const static int N = 1e5+5;
    int tr[N];
    unordered_map<int,int> mp;
    int n, m;
    int b[N];

    int lowbit(int x)
    {
        return x& -x;
    }

    void add(int x, int v)
    {
        for(int i = x; i<= m; i+=lowbit(i))
            tr[i] = max(tr[i], v);
    }

    int query(int x)
    {
        int ans = 0;
        for(int i = x;i;i-=lowbit(i))
            ans = max(ans, tr[i]);
        return ans;
    }
    
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& g) {
        vector<int> ans;
        int n = g.size();
        for(int i=0;i<n;i++){
            b[i+1] = g[i];
        }
        sort(b+1,b+n+1);
        for (int i = 1; i <= n; i ++ )
        {
            if(!mp.count(b[i]))
                mp[b[i]] = ++m; 
        }
    
        for (int i = 0; i < n; i ++ )
        {
            int k = mp[g[i]];
            int len = query(k) + 1;
            ans.push_back(len);
            add(k, len);
        }
        return ans;
    }
};