class Solution {
public:
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {
        vector<int> res;
        return lengthOfLIS(obstacles);
    }
    vector<int> lengthOfLIS(vector<int>& nums) {
        //贪心-每次取上升最慢的组成数组d，长度即为最长子序列长度
        vector<int> res(1,1);
        vector<int> d(nums.size(),-1);
        d[0]=nums[0];
        int len=0;
        for(int i=1;i<nums.size();i++){
            int l=0,r=len,pos=0,mid;
            if(nums[i]>=d[len]){
                d[++len]=nums[i];
                res.emplace_back(len+1);
                //cout<<"#"<<res.back()<<" ";
            }else{
                while(l<=r){
                    mid=l+(r-l)/2;
                    if(nums[i]<d[mid]){
                        pos=mid;
                        r=mid-1;
                    }
                    else if(nums[i]>=d[mid]){
                        l=mid+1;
                    }
                }
                if(pos!=-1){
                    d[pos]=nums[i];
                }
                res.emplace_back(pos+1);
                //cout<<"$"<<res.back()<<" ";
            }
        }
        return res;
    }
};