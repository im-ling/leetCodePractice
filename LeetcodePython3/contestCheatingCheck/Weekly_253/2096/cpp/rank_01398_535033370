class Solution {
public:
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {
        
        int n = obstacles.size();
        vector<int> result;
        
        vector<int> dp(n+1, INT_MAX);
        dp[0] = INT_MIN;
        //int r = INT_MIN;
        for (int i = 0; i < n; i++) {
            int j = findFirstGreater(dp, obstacles[i]);            
            dp[j] = min(dp[j], obstacles[i]);
            
//             for (auto dd : dp)
//                 cout << dd << ", ";
            
//             cout << endl;
            
            //r = max(r, j);
            result.push_back(j);
        }
        
        return result;
    }
    
    int findFirstGreater(vector<int> &dp, int o) {
        int left = 0;
        int right = dp.size()-1;
        while (left + 1 < right) {
            int mid = (left + right) / 2;
            if (dp[mid] <= o)
                left = mid;
            else
                right = mid;
        }
        
        if (dp[left] > o)
            return left;
        
        if (dp[right] > o)
            return right;
        
        return -1;
    }
};