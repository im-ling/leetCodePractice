class Solution {
public:
vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {
        vector<int> queue;
        vector<int> res;
        for (auto x : obstacles) {
            if (!queue.empty() && x < queue.back()) {
                if (x <= queue[0]) {
                    
                    if (x < queue[0]) {
                        queue[0] = x;
                        res.push_back(1);
                    } else {
                        int kk = 1;
                        while (kk < queue.size() && queue[kk] == queue[0]) {
                            kk++;
                        }
                        queue[kk] = x;
                        res.push_back(kk+1);
                    }
                    
                }
                else {
                    int l = 0, r = queue.size() - 1;
                    while (l < r) {
                        int mid = l + r + 1>> 1;
                        if (queue[mid] <= x) {
                            l = mid;
                        } else {
                            r = mid - 1;
                        }
                    }
                    res.push_back(l+2);
                    queue[l+1] = x;

                }
                
            }
            else {

                queue.push_back(x);
                res.push_back(queue.size());

            }
        }

        return res;

    }
};