class Solution {
public:
    
    int arr[100005];
    int maxn;
    
    int findAndReplace(int t){
       // cout<<"<<"<<t<<"  "<<arr[maxn]<<endl;
        if(t >= arr[maxn]){
            maxn++;
            arr[maxn] = t;
            return maxn;
        }else{
          /*  for(int i = 0 ; i<= maxn; ++i)
                cout<<arr[i]<<"  ";
            cout<<endl;*/
            int ans = upper_bound(arr, arr + maxn + 1, t) - arr;
            arr[ans] = t;
            return ans;
            /*
            int l = 1;
            int r = maxn;
            int ans = 1;
            
            while(l <= r){
                int mid = l + (r - l) / 2;
                if(arr[mid] <= t){
                    l = mid + 1;
                    ans = l + 1;
                }else{
                    r = mid - 1;
                }
            }
            
            return ans;*/
        }
        
    }
    
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {
        vector<int> res;
        arr[0] = 0;
        for(int i = 0 ; i< obstacles.size(); ++i){
            res.push_back(findAndReplace(obstacles[i]));
        }
        
        
        return res;
    }
};