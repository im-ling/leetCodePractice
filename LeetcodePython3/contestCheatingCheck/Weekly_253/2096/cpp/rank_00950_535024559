class Solution {
public:
    
    #define N 100002
	int B[N], f[N], a[N];
    
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obs) {
        int i, mid, right, left, num, blen, max = 0, n = obs.size();
        vector<int> res(n);
        
        for( int i = 1 ; i <= n ; ++i ){
            a[i] = obs[i - 1];
            B[i] = -1;
        }
        
        blen = 1;
        B[1] = a[1];
        res[0] = 1;
		for (i = 2; i <= n; i++) {
            num = a[i], left = 1, right = blen;
			while (left <= right) {
				mid = (left + right) / 2;
				if (B[mid] <= num) left = mid + 1;
				else right = mid - 1;
			}
            //cout<<i<<"  "<<left<<", "<<num<<" "<<blen<<endl;
			f[i] = left;
            B[left] = num;
            //for( int j = 1 ; j <= n ; ++j ) cout<<B[j]<<" ";
            //cout<<endl;
            /*if( blen >= left && B[left] > num )
   			  B[left] = num;
            else if( blen ){
                
            }*/
			//blen = left;
            max = f[i];
            if (blen < left) blen = left;
            //else if( blen > left ) blen = left;
			//if (max < f[i]) max = f[i];
            //else if( f[i] < max ) max = f[i];
            res[i - 1] = max;
		}
        
        return res;
    }
};