class Solution {
public:
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& nums) {
        int n = nums.size();
        vector<int> length(100001, INT_MAX);
        length[0] = 0;
        vector<int> ans(n, 0);
        for (int i = 0; i < n; ++i) {
            int num = nums[i];
            int len = binarySearch(length, num);
            ans[i] = len + 1;
            length[len + 1] = min(num, length[len + 1]);
        }
        
        return ans;
    }
    
    int binarySearch(vector<int>& length, int target) {
        int left = 0, right = length.size() - 1, mid, ans = -1;
        while (left <= right) {
            mid = (right - left) / 2 + left;
            if (length[mid] <= target) {
                ans = mid;
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        
        return ans;
    }
};