class Solution {
public:
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {
        int n = obstacles.size();
        // vector<int> dp(n, 1);
        // int[1e7+1] = {0};
        // for(int i = 0; i < n; ++i)
        // {
        //     for(int j = 0; j < i; ++j)
        //     {
        //         if(obstacles[i] >= obstacles[j] && dp[j] + 1 > dp[i])
        //             dp[i] = dp[j] + 1;
        //     }
        // }
        // return dp;
        vector<int> dp(n, 1);
        vector<int> ends{};
        int l = 0;
        for (auto a : obstacles) {
            if(ends.size() == 0)
            {
                ends.push_back(a);
                dp[l++] = 1;
            }
            else if (a < ends[0]) 
            {
                ends[0] = a;
                dp[l++] = 1;
            }
            else if (a >= ends.back()) 
            {
                ends.push_back(a); 
                dp[l++] = ends.size();
            }
            else {
                int left = 0, right = ends.size();
                while (left < right) {
                    int mid = left + (right - left) / 2;
                    if (ends[mid] <= a) left = mid + 1;
                    else right = mid;
                }
                // if(ends[left] != a)
                ends[left] = a;
                dp[l++] = left+1;
            }
            
        }
        return dp;
    }
};