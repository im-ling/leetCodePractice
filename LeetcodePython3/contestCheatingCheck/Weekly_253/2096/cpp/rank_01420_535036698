class Solution {
public:
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) 
    {
        int n = obstacles.size() ; 
        // this would contain them in the order
        vector<int> tail(n,0) ;         
        int length = 1 ; 
        vector<int> dp(n) ; 
        
        tail[0] = obstacles[0] ; 
        dp[0] = 1 ;
        for(int i = 1 ; i < n ; i++)
        {
            if (obstacles[i] < tail[0])
            {
                tail[0] = obstacles[i] ; 
                dp[i] = 1 ; 
            }
            else if (obstacles[i] >= tail[length-1])
            {
                tail[length++] = obstacles[i] ; 
                dp[i] = length ; 
            }
            else 
            {
                int val = obstacles[i] ; 
                int s = 0, e = length-1 ; 
                int ans = 0  ;
                //finding the first index it is greater than
                while (s <= e)
                {
                    int mid = s + (e-s)/2 ; 
                    
                    if (tail[mid] > val)
                    {
                        ans = mid ; 
                        e = mid-1; 
                    }
                    else if (tail[mid] <= val)
                    {
                        s = mid+1 ; 
                    }
                }
                tail[ans] = val ; 
                dp[i] = ans+1 ; 
            }
        }
        
        return dp ;
    }
};