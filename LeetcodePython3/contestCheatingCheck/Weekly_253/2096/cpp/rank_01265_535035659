class Solution {
public:
    int CeilIndex(std::vector<int>& v, int l, int r, int key)
{
    while (r - l > 1) {
        int m = l + (r - l) / 2;
        if (v[m] >= key)
            r = m;
        else
            l = m;
    }
 
    return r;
}
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& a) {
        int n = a.size() ; 
        int dp[n+1];
        vector<int> ans(n) ; 
        for(int i=1;i<=n;i++) dp[i] = INT_MAX ;
        dp[0] = INT_MIN;
        for(int i=0;i<n;i++){
            int idx = upper_bound(dp,dp+n+1 ,a[i]) - dp ; 
            if(a[i] >= dp[idx-1] && a[i] < dp[idx] ) dp[idx] = a[i];
            ans[i] = idx ; 
        }
        // for(int i = 0 ; i <= n ; i ++) cout<< dp[i]<<" " ; 
        // cout<<endl ; 
        //for(int i = 0 ; i < n ; i ++) cout<< ans[i]<<" " ; 
        return ans ;
    }

};