class Solution {
public:  
    
    int bs(int left,int right, int x, vector<int>&arr )
    {
        
        
        while ( left+1< right)
        {
            int mid= (left+right)/2 ;
            
            if ( arr[mid]<=x)
            {
                left=mid ;
            }
            
            else
            {
                right= mid ;
            }
        }
        
        
        
        return right ;
        
    }
    
    vector<int> longestObstacleCourseAtEachPosition(vector<int>&arr) {
            
         int n= arr.size() ;
        
        
         vector<int>dp ( n+1, INT_MAX) ;
        
        dp[0]=arr[0] ;
        
        int length=1 ;
        
        unordered_map<int,int>index ;
        
        index[0]=1 ;
        
        
        for ( int i=1; i< n; i++)
        {
              
            if ( arr[i]<dp[0])
            {
                dp[0]= arr[i] ;
                
                index[i]=1 ;
            }
            
            else if ( arr[i]>=dp[length-1])
            {
                //  cout << "inc " << arr[i] << "->>" << length <<" "<< dp[length-1] <<  endl;
                
                dp[length]= arr[i] ;
                
                index[i]= length+1 ;
                
                length++ ;
                
              
            }
            
            else
            {
                
                int idx= bs(0,length-1, arr[i], dp) ;
                
              // cout << arr[i] <<  "  "<<  idx << " "<< i <<  endl;
                 
             //   cout << i <<" -> "<< arr[i] <<" ->"<< idx << endl;
                
                if ( arr[i]< dp[idx])
                {
                    dp[idx]= arr[i] ;
                }
                
                
            index[i]= idx+1 ;
                
            }
        }
        
        
        
        vector<int>ans ;
        
        
        for ( int i=0; i< n; i++)
        {
            ans.push_back(index[i]) ;
        }
        
        
        return ans ;
        
        
    }
};

//  [5,1,5,5,1,3,4,5,1,4]

//[1,1,2,3,2,3,4,5,3,5]