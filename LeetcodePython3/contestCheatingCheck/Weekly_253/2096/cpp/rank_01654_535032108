class Solution {
public:
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {
        stack<int> s1;
        int n = obstacles.size();
        vector<int> dp(n, 1);
        vector<int> temp={obstacles[0]};
        for(int i=1; i<n; i++){
            if(obstacles[i]>=temp[temp.size()-1]){
                temp.push_back(obstacles[i]);
                dp[i] =  temp.size();
            }else{
                //find the first elt which is less than or equal to the obstacles[i]
                int lo=0, hi = temp.size()-1;
                while(lo<hi){
                    int mid = lo + (hi-lo)/2;
                    if(temp[mid]<=obstacles[i]) lo = mid+1;
                    else hi = mid;
                }
                cout << lo << " ";
                temp[lo] = obstacles[i];
                dp[i] = lo+1;
            }
        }
        cout << endl;
        return dp;
    }
};