class Solution {
public:
    // Maintain a increasing array (update it with smaller number, although it may not the correct array) and binary search
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {
        int n = obstacles.size();
        vector<int> answer(n, 1), array(1, obstacles[0]);
        for (int i = 1; i < n; ++i) {
            auto it = upper_bound(array.begin(), array.end(), obstacles[i]);
            if (it == array.end()) {
                array.push_back(obstacles[i]);
                answer[i] = array.size();
            }
            else {
                array[it - array.begin()] = obstacles[i];
                answer[i] = (it - array.begin() + 1);
            }
        }
        return answer;
    }
};