class Solution {
public:
    int dfs(vector<int>&ans,int n,int x)
    {
        int l=0,r=n-1;
        while(l+1<r)
        {
            int mid=l+(r-l)/2;
            if(ans[mid]<=x)
            {
                l=mid;
            }
            else
            {
                r=mid;
            }
        }
        if(ans[r]<=x)
            return r+1;
        else if(ans[l]<=x)
            return l+1;
            return l;
    }
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& arr) {
       
        vector<int>dp;
        int n=arr.size();
         vector<int>ans(n);
        int mx=0;
        for(int i=0;i<n;i++)
        {
          if(mx==0)
          {
              mx++;
              ans[0]=arr[i];
              dp.push_back(mx);
          }
            else
            {
                int pos=dfs(ans,mx,arr[i]);
                dp.push_back(pos+1);
                ans[pos]=arr[i];
                mx=max(pos+1,mx);
            }
        }
        return dp;
        
        
    }
};