class Solution {
public:
    vector<int> sequence, I, L;
    int lislength;
    int lis(int n)
    {
        int i, low, high, mid;
        I[0] = -(1<<28);
        for(i = 1; i <= n; i++)
            I[i] = 1<<28;
        lislength = 0;
        for(i = 0; i < n; i++)
        {
            low = 0, high = lislength;
            while(low <= high)
            {
                mid = (low + high) >> 1;
                if(I[mid] <= sequence[i])
                    low = mid + 1;
                else
                    high = mid - 1;
            }
            I[low] = sequence[i];
            L[i] = low;
            if(lislength < low)
                lislength = low;
        }
        return lislength;
    }
    
    
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {
        int n = obstacles.size();
        L.resize(n);
        I.resize(n + 1);
        sequence = obstacles;
        lis(n);
        return L;
    }
};