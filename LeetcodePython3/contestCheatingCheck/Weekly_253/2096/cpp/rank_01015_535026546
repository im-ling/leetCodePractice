class Solution {
public:
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& v) {
        vector<int> ans(v.size());
        if (v.size() == 0) // boundry case
        return ans;
 
    std::vector<int> tail(v.size(), 0);
    int length = 1; // always points empty slot in tail
 
    tail[0] = v[0];
        ans[0]=1;
 map<int,int> mp;
        mp[v[0]]=1;
    for (int i = 1; i < v.size(); i++) {
 
        // Do binary search for the element in
        // the range from begin to begin + length
        auto b = tail.begin(), e = tail.begin() + length;
        auto it = upper_bound(b, e, v[i]);
       
        // If not present change the tail element to v[i]
        if (it == tail.begin() + length){
            // cout<<i<<endl;
            ans[i]=length+1;
            mp[v[i]]=length+1;
            tail[length++] = v[i];
        }
        else{
            
            int len=it-tail.begin();
            
            ans[i]=len+1;
            int temp=0;
            if(mp.find(v[i])!=mp.end()){
                temp=mp[v[i]];
                mp[v[i]]++;
                ans[i]=max(len+1,mp[v[i]]);
            }
            else{
                mp[v[i]]=ans[i];
                
            }
            *it = v[i];
        }
    }
 
    return ans;
    }
};