class Solution {
public:
    vector<int> st;
    
    void set_st(int n) {
        int sn = 1;
        while (sn < n) sn *= 2;
        st.resize(sn * 2, 0);
    }
    
    int find_val(int a, int b) {
        int sn = st.size() / 2;
        
        a += sn;
        b += sn;
        int val = 0;
        while (a <= b) {
            if (a % 2 == 1) val = max(val, st[a++]);
            if (b % 2 == 0) val = max(val, st[b--]);
            a /= 2; b /= 2;
        }
        return val;
    }
    
    void change_val(int k, int x) {
        int sn = st.size() / 2;
        
        k += sn;
        st[k] = x;
        for (k /= 2; k >= 1; k /= 2) {
            st[k] = max(st[k * 2], st[k * 2 + 1]);
        }
    }
    
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {
        int max_val = 0;
        for (int i = 0; i < obstacles.size(); i++) {
            max_val = max(max_val, obstacles[i]);
        }
        set_st(max_val + 1);
        vector<int> ans(obstacles.size(), 0);
        for (int i = 0; i < obstacles.size(); i++) {
            ans[i] = find_val(0, obstacles[i]) + 1;
            change_val(obstacles[i], ans[i]);
        }
        return ans;
    }
};