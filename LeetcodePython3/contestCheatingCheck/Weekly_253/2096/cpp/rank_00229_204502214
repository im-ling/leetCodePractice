class Solution {
public:
    int a[100005];
    int mx[100005];
    int n;
    int lowbit(int i)
    {
        return i&(-i);
    }
    void update(int i,int v)
    {
        for(;i<=n;i+=lowbit(i))
            mx[i]=max(mx[i],v);
    }
    int get(int i)
    {
        int ret=0;
        for(;i>0;i-=lowbit(i))
        {
            ret=max(ret,mx[i]);
        }
        return ret;
    }
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {
        queue<int>que;
        set<int>se;
        map<int,int>mp;
        for(int i=0;i<obstacles.size();i++)
            se.insert(obstacles[i]);
        n=0;
        for(auto it=se.begin();it!=se.end();it++)
        {
            mp[*it]=++n;
            a[n]=0;
            mx[n]=0;
        }
        vector<int>ans;
        for(int i=0;i<obstacles.size();i++)
        {
            int v=mp[obstacles[i]];
            a[v]=get(v)+1;
            update(v,a[v]);
            ans.push_back(a[v]);
        }
        return ans;
    }
};