class Solution {
public:
    int binarySearch(vector<int>& nums, int l, int r, int target) {
        if (l >= r - 1) {
            return r;
        }
        int mid = (l + r + 1) >> 1;
        if (nums[mid] <= target) {
            return binarySearch(nums, mid, r, target);
        } else 
            return binarySearch(nums, l, mid, target);
    }
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {
        int n = obstacles.size();
        vector<int> ans(n, 1), d(n, 2147483647);
        int len = -1;
        for (int i = 0; i < n; i++) {
            if (len < 0 || d[len] <= obstacles[i]) {
                len++;
                d[len] = obstacles[i];
                ans[i] = len + 1;
            } else {
                if (obstacles[i] < d[0]) {
                    ans[i] = 1;
                    d[0] = obstacles[i];
                    // for (auto it : d)
                    //     cout<< it << " ";
                    // cout<<endl;
                    continue;
                }
                int tmp = binarySearch(d, 0, len, obstacles[i]);
                // if (i == 4)
                //     cout << tmp << endl;
                d[tmp] = obstacles[i];
                ans[i] = tmp + 1;
            }
            // for (auto it : d)
            //     cout<< it << " ";
            // cout<<endl;
        }
        return ans;
    }
};