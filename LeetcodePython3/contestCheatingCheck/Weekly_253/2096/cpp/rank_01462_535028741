class Solution {
public:
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {
        int n = obstacles.size();
        /*
        vector<int> dp(n, 1);
        for (int i = 1; i < n; ++i) {
            for (int j = 0; j < i; ++j) {
                if (obstacles[j] <= obstacles[i]) {
                    dp[i] = max(dp[i], dp[j] + 1);
                }
            }
        }
        return dp;
        */
        // LIS
        vector<int> minBack;
        vector<int> res;
        for (int num : obstacles) {
            if (minBack.empty() || num >= minBack.back()) {
                minBack.push_back(num);
                res.push_back(minBack.size());
            } else if (num < minBack.back()) {
                auto it = upper_bound(minBack.begin(), minBack.end(), num);
                *it = num;
                res.push_back(distance(minBack.begin(), it) + 1);
            }
        }
        return res;
    }
};