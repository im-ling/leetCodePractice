
int maxn,n,a[100009],B[100009],cnt;
int find(int x)
{
    int l,r,mid;
    l=0,r=cnt;
    while(l<=r)
    {
        mid=(l+r)/2;
        if(B[mid]>=x)    r=mid-1;
        else l=mid+1;
    }
    return l;
}

class Solution {
public:
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {
        n=obstacles.size();
    for(int i=1;i<=n;i++)   a[i]=obstacles[i-1];
    
    B[0]=-1;cnt=0;
        vector<int> rec;
        
    for(int i=1;i<=n;i++)
    {
        int tt;
        if(a[i]>=B[cnt])
        {
           B[++cnt]=a[i]; 
            tt=cnt;
        }
        else{
            int t=upper_bound(B+1,B+1+cnt,a[i])-B;
            B[t]=a[i];
            tt=t;
        }
        rec.push_back(tt);
    }

        return rec;
    }
};