using pii = pair<int, int>;
struct BIT{
    vector<int> tree;
    int sz;

    void build(int n) {
        tree.assign(n + 1, 0);
        sz = n + 1;
    }

    inline int lowbit(int x) {
        return x & -x;
    }

    void set(int i, int v) {
        for (; i < sz; i += lowbit(i)) tree[i] = max(tree[i], v);
    }

    int calc(int i) {
        int ans = 0;
        for (; i; i -= lowbit(i)) ans = max(ans, tree[i]);
        return ans;
    }
};
class Solution {
public:
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {
        int n = obstacles.size();
        vector<int> copy(obstacles);
        sort(copy.begin(), copy.end());
        int id = 0;
        unordered_map<int, int> mp;
        for (int v : copy) if (!mp.count(v)) mp[v] = ++id;

        BIT bit;
        bit.build(id);
        vector<int> ans(n);
        for (int i = 0; i < n; i++) {
            int id = mp[obstacles[i]];
            ans[i] = bit.calc(id) + 1;
            bit.set(id, ans[i]);
        }
        return ans;
    }
    // [5,1,5,5,1,3,4,5,1,4]
    // [1,1,2,3,2,3,4,5,3,5]
};