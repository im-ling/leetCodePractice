class Solution {
public:
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {
        // for each number take lis for any number <= current obstacle 
        // each entry is added once and removed once from map 
        set<int> st; 
        map<int,int> mp; 
        vector<int> res; 
        for(int i=0;i<obstacles.size();i++){
            int &ele = obstacles[i]; 
            // cout<<"ele "<<ele<<" "; 
            auto it = st.lower_bound(ele); 
            if(it != st.end() ){
                // there is someone less than it
                // cout<<"1 "<<endl; 
                set<int> remove;
                if(*it == ele){
                    // cout<<ele<<endl; 
                    mp[ele] += 1; 
                }
                else if(it != st.begin()){
                    it--; 
                    // cout<<*it<<endl; 
                    mp[ele] = mp[*it] + 1;  
                }
                else{
                    // it's begin element which is grater no less element 
                    mp[ele] = 1; 
                }
                for(it++; it != st.end();it++){
                    if(mp[*it] <= mp[ele]){
                        mp.erase(*it); 
                        remove.insert(*it);
                    }
                    else break; 
                }
                for(auto x: remove) st.erase(x); 
            }
            else{
                // cout<<"2 "<<endl; 
                if(st.size() > 0){
                    it--; 
                    // cout<<*it<<endl; 
                    mp[ele] = 1+mp[*it]; 
                }
                else mp[ele] = 1; 
            }
            res.push_back(mp[ele]); 
            st.insert(ele); 
        }
        return res; 
    }
};