class Solution {
public:
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {
        int n = obstacles.size();
        vector<pair<int,int>> buffer(n);
        for (int i = 0; i < n; ++i) {
            buffer[i] = make_pair(obstacles[i], i);
        }
        sort(buffer.begin(), buffer.end());
        vector<int> res(n);
        vector<int> inc;
        for (auto& p : buffer) {
            auto i = lower_bound(inc.begin(), inc.end(), p.second);
            if (i == inc.end()) {
                inc.push_back(p.second);
                res[p.second] = inc.size();
            } else {
                *i = p.second;
                res[p.second] = (i - inc.begin()) + 1;
            }
        }
        return res;
    }
};