#define ll long long 
vector<int> tree(1<<19);
int n=0;

    void update(int index,int val,int l2=0,int r2=n-1,int ci=0)
    {
        if(l2==r2)
        {
            tree[ci]=val;
            return ;
        }
        int mid=(l2+r2)/2;
        if(index<=mid)
        {
            update(index,val,l2,mid,2*ci+1);
        }
        else
        {
            update(index,val,mid+1,r2,2*ci+2);
        }
        tree[ci]=max(tree[2*ci+1],tree[2*ci+2]);
    }
    int query(int l1,int r1,int l2=0,int r2=n-1,int ci=0)
    {
        if(l2>=l1&&r2<=r1)
        {
            return tree[ci];
        }
        if(l2>r1||r2<l1)
        {
            return 0;
        }
        int mid=(l2+r2)/2;
        return max(query(l1,r1,l2,mid,2*ci+1),query(l1,r1,mid+1,r2,2*ci+2));
    }
class Solution {
public:
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& a) {
        for(int i=0;i<4*n;i++)
        {
            update(i,0);
        }
        vector<int> temp=a;
        n=a.size();
        sort(temp.begin(),temp.end());
        temp.resize(unique(temp.begin(),temp.end())-temp.begin());
        unordered_map<int,int> index;
        for(int i=0;i<temp.size();i++)
        {
            index[temp[i]]=i;
        }
        vector<int> ans(n);
        update(index[a[0]],1);
        ans[0]=1;
        for(int i=1;i<n;i++)
        {
            // if(index[a[i]]==0)
            // {
            //     ans[i]=1;
            //     update(index[a[i]],ans[i]);
            //     continue;
            // }
            int maxi=query(0,index[a[i]]);
            ans[i]=maxi+1;
            update(index[a[i]],ans[i]);
        }
        return ans;
    }
};