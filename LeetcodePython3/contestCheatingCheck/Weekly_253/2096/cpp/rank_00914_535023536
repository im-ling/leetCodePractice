int getMid(int s, int e)
{
    return s + (e - s) / 2;
}
int MaxUtil(int* st, int ss, int se, int l,
            int r, int node)
{
    if (l <= ss && r >= se)
        return st[node];
    if (se < l || ss > r)
        return -1;
    int mid = getMid(ss, se);
     
    return max(MaxUtil(st, ss, mid, l, r,
                       2 * node + 1),
               MaxUtil(st, mid + 1, se, l,
                       r, 2 * node + 2));
}
void updateValue(int arr[], int* st, int ss, int se,
                 int index, int value, int node)
{
    if (index < ss || index > se)
    {
        //cout << "Invalid Input" << endl;
        return;
    }
     
    if (ss == se)
    {  
        arr[index] = value;
        st[node] = value;
    }
    else {
            int mid = getMid(ss, se);
             
            if (index >= ss && index <= mid)
                updateValue(arr, st,
                            ss, mid, index,
                            value, 2 * node + 1);
            else
                updateValue(arr,
                            st, mid + 1, se,
                            index,
                            value, 2 * node + 2);
             
            st[node] = max(st[2 * node + 1],
                       st[2 * node + 2]);
    }
    return;
}
int getMax(int* st, int n, int l, int r)
{
    if (l < 0 || r > n - 1 || l > r)
    {
        //printf("Invalid Input");
        return -1;
    }
 
    return MaxUtil(st, 0, n - 1, l, r, 0);
}
int constructSTUtil(int arr[], int ss, int se,
                    int* st, int si)
{
    if (ss == se)
    {
        st[si] = arr[ss];
        return arr[ss];
    }
    int mid = getMid(ss, se);
     
    st[si] = max(constructSTUtil(arr, ss, mid, st,
                                 si * 2 + 1),
                 constructSTUtil(arr, mid + 1, se,
                                 st, si * 2 + 2));
     
    return st[si];
}
int* constructST(int arr[], int n)
{
    int x = (int)(ceil(log2(n)));
    int max_size = 2 * (int)pow(2, x) - 1;
    int* st = new int[max_size];
    constructSTUtil(arr, 0, n - 1, st, 0);
    return st;
}

class Solution {
public:
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& ob) {
       // int va[10000001];
        //for(int i=1;i<=10000000;i++)
          //  va[i]=-1;
        map<int,int> va;
        vector<int> vc;
        vector<int> nw;
        int n=ob.size();
        for(int i=0;i<n;i++) nw.push_back(ob[i]);
        sort(nw.begin(),nw.end());
        int k=0;
        for(int i=1;i<n;i++)
        {
            if(nw[i]!=nw[i-1])
            {
                va[nw[i-1]]=k;
                k++;
            }
        }
        va[nw[n-1]]=k;
        for(int i=0;i<n;i++)
            ob[i]=va[ob[i]];
        int maxi[100000];
        for(int i=0;i<100000;i++) maxi[i]=0;        
        int* st = constructST(maxi,100000);
        for(int i=0;i<n;i++)
        {
            int val=ob[i];
            int x=getMax(st, 100000, 0, val);
            vc.push_back(x+1);
            updateValue(maxi, st, 0, 100000 - 1,val,x+1, 0);
        }
        return vc;
    }
};