class Solution {
public:
    
    int binary(vector<int> &v,int ele){
        
        int i = 0;
        int j = v.size()-1;
        int idx = -1;
        while(i<=j){
            int m = i + (j-i)/2;
            if(v[m]>ele){
                j = m-1;
                idx = m;
            }else{
                i = m + 1;
            }
        }
        
        return idx;
    }
    
    
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& o) {
    
        vector<int>v;
        v.push_back(o[0]);
        
        int n = o.size();
        vector<int>ans(n);    
        ans[0] = 1;
        
        for(int i=1;i<n;i++){
            if(o[i]>=v.back()){
                v.push_back(o[i]);
                ans[i] = v.size();
            }else{
                int idx = binary(v,o[i]);
                ans[i] = idx + 1;
                v[idx] = o[i];
            }
        }
        
        
        return ans;
    }
};