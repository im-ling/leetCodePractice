class Solution {
public:
    int n,f[100005];
    vector<int> res;
    int getres(int m)
    {
         int res1=0;
        while (m>0)
        {
            res1=max(res1,f[m]);
            m=m&(m-1);
        }
        return res1;
    }
    void update(int m,int x)
    {
        while (m<=n)
        {
            f[m]=max(f[m],x);
            m+=m& -m;
        }
    }
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& a) {
        n=a.size();
        set<int> s(a.begin(),a.end());
        vector<int> b(s.begin(),s.end());
        for (int i=0;i<n;i++) a[i]=lower_bound(b.begin(),b.end(),a[i])-b.begin()+1;
        memset(f,0,sizeof f);
        for (int i=0;i<n;i++)
        {
            int tg=getres(a[i])+1;
            res.push_back(tg);
            update(a[i],tg);
         }
        return res;
    }
};