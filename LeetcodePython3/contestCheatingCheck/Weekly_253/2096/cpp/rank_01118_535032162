class Solution {
public:
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {
        
        vector<int> sequence_max{0};
        
        vector<int> longest_increasing_subsequence;

        
        for (int i = 0; i < obstacles.size(); ++i) {
            const int height = obstacles[i];
            auto it = upper_bound(sequence_max.begin(), sequence_max.end(), height);
            longest_increasing_subsequence.push_back(it - sequence_max.begin());
            if (it == sequence_max.end()) {
                sequence_max.push_back(height);
            } else {
                *it = height;
            }
        }
        return longest_increasing_subsequence;
    }
};