
struct fenwick{
  int lim;
  long long int *tree;
  fenwick(int _lim){
      lim=_lim;
      tree=new long long int[lim];
  }
  void init(){
    for(int i=0;i<lim;i++){
      tree[i]=0;
    }
  }
  void update(int x,long long int v){
    while(x<lim){
      tree[x] = max(v, tree[x]);
      x+=x&(-x);
    }
  }
  long long int query(int x){
    long long int ans=0;
    while(x>0){
      ans=max(ans,tree[x]);
      x-=x&(-x);
    }
    return ans;
  }
  int _query(int k){
    int low=1;
    int high=500000;
    int ans=0;int x=k;
    while(low<=high){
      int mid=low+(high-low)/2;
      if(query(mid)>=x){
        ans=mid;
        high=mid-1;
      }else{
        low=mid+1;
      }
    }
    return ans;
  }
};
class Solution {
public:
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& ob) {

     int n=ob.size();
      vector<int> dp(n);
        dp[0]=1;
        set<pair<int,int> > ss;
        ss.insert({-ob[0],1});
        fenwick tree(10000001);
        
        int maxm = 1;
        tree.update(ob[0],1);
        for(int i=1;i<n;++i){
            int x = ob[i];
            int query = tree.query(x);
            dp[i]=query+1;
            tree.update(x,dp[i]);
        }
        return dp;
    }
};