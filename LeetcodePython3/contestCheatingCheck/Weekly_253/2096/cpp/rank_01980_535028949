class Solution {
public:
    int bs( vector<int> &dp , int left, int right, int val ) {
        
        if( right - left <= 1 ) {
            if( right == left ) {
                if( dp[left] <= val )  return left;
                else return -1;
            }else{
                if( dp[right] <= val ) return right;
                else if( dp[left] <= val ) return left;
                else return -1;
            }
        }
        
        int mid = left + ( right - left ) / 2;
        
        if( dp[mid] <= val ) return bs( dp, mid, right , val );
        else return bs( dp, left, mid - 1, val );
        
    }
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& obstacles) {
        
        int n = obstacles.size();
        
        vector<int> dp(n , INT_MAX );
        vector<int> ans;
        
        for( int i = 0 ; i<n ; ++i ) {
            int idx = bs( dp, 0, i, obstacles[i] );
            // cout << idx << " " << obstacles[i] << endl;
            
            if( idx == -1 ) {
                ans.push_back(1);
                dp[0] = min( dp[0], obstacles[i] );
            }else{
                ans.push_back( idx + 1 + 1);
                dp[idx + 1] = min( dp[idx+1], obstacles[i] );
            }
        }
        return ans;
    }
};