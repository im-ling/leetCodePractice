public class Solution {
    public int[] LongestObstacleCourseAtEachPosition(int[] obstacles) {
        
        int n = obstacles.Length;
        int[] f = new int[n + 1];
        int[] r = new int[n];
        
        f[0] = -1;
        f[1] = obstacles[0];
        
        for (int i = 2 ; i <=n ; i ++)
        {
            f[i] = Int32.MaxValue;
        }
        
        r[0] = 1;
        
        for (int i = 1; i < n ; i ++)
        {        
            int m = find(f, 0, n, obstacles[i]);
            r[i] = m + 1;
            
            f[m + 1] = Math.Min(f[m + 1], obstacles[i]);
        }
        
        return r;
    }
    
    public int find(int[] f, int start, int end, int target)
    {
        if (start == end)
        {
            return start;
        }
        
        if (start + 1 == end)
        {
            if (f[end] == target) return end;
            return start;
        }
        
        int m = (start + end) / 2;
        
        if (f[m] <= target)
        {
            return find(f, m, end, target);
        }
        else 
        {
            return find(f, start, m, target);
        }
    }
}