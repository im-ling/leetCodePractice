class Solution:
    def bisearch(self, lst, obs):
        if len(lst) == 0:
            return 0
        if lst[0] > obs:
            return 0
        if lst[-1] <= obs:
            return len(lst)
        l = 0
        r = len(lst) - 1
        while r - l != 1:
            m = (l + r) // 2
            if lst[m] <= obs:
                l = m
            else:
                r = m
        return r
    
    def longestObstacleCourseAtEachPosition(self, obstacles: List[int]) -> List[int]:
        lst = [obstacles[0]]
        output = [0] * len(obstacles)
        output[0] = 1
        
        for i in range(1, len(obstacles)):
            obs = obstacles[i]
            if obs >= lst[-1]:
                lst.append(obs)
                output[i] = len(lst)
            else:
                ix = self.bisearch(lst, obs)
                lst[ix] = obs
                output[i] = ix + 1
        return output
            
                    