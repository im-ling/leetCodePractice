class Solution:
    def longestObstacleCourseAtEachPosition(self, arr: List[int]) -> List[int]:
        # n = len(arr)
        # dp = [0] * n
        # left = [-1] * n
        # stack = []
        # for i in range(n):
        #     while stack and stack[-1][0] > arr[i]:
        #         stack.pop()
        #     else:
        #         if stack:
        #             left[i] = stack[-1][1]
        #         stack.append((arr[i], i))
        # for i in range(len(arr)):
        #     if left[i] == -1:
        #         dp[i] = 1
        #     else:
        #         dp[i] = dp[left[i]] + 1
        # return dp
        n = len(arr)
        dp = [-1] * (n + 1)
        res = [0] * n
        for i in range(n):
            L = 1
            R = n
            while L <= R:
                mid = (L + R) // 2
                if dp[mid] == -1 or dp[mid] > arr[i]:
                    R = mid - 1
                else:
                    L = mid + 1
                    
            res[i] = R + 1
            if R + 1 <= n  and (dp[R + 1] == -1 or dp[R + 1] > arr[i]):
                dp[R + 1] = arr[i]

        return res
            