class Solution:
    def longestObstacleCourseAtEachPosition(self, obstacles: List[int]) -> List[int]:
        # lis = [1 for i in range(len(obstacles))]
        # for i in range(1,len(obstacles)):
        #     for j in range(0,i):
        #         if obstacles[j] <= obstacles[i] and lis[i] < lis[j] + 1:
        #             lis[i] = lis[j] + 1
        # return lis
        lis = [0 for i in range(len(obstacles)+1)]
        l = [1]
        length = 1
        lis[0] = obstacles[0]
        for i in range(1,len(obstacles)):
            if obstacles[i] >=  lis[length-1]:
                lis[length] = obstacles[i]
                length += 1
                l.append(length)
            else:
                
                x = bisect.bisect_right(lis,obstacles[i],0,length-1)
                if lis[x] == obstacles[i]:
                    lis.insert(x,obstacles[i])
                else:
                    lis[x] = obstacles[i]
                # print(lis,x,obstacles[i])
                # while not lis[x+1] == 0:
                #     if lis[x] == lis[x+1]:
                #         x += 1
                #     else:
                #         break
                l.append(x+1)
            # print(lis)
        return l