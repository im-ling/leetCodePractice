class Solution:
    def longestObstacleCourseAtEachPosition(self, obstacles: List[int]) -> List[int]:
        
        def compress(a):
            _a = [(x, i) for i, x in enumerate(a)]
            _a.sort()
            
            _b = [None] * len(a)
            _b[_a[0][1]] = 1
            for i in range(1, len(a)):
                _b[_a[i][1]] = _b[_a[i-1][1]]
                if _a[i][0] != _a[i-1][0]:
                    _b[_a[i][1]] += 1                    
            return _b
        
        obstacles = compress(obstacles)
        sz = 1
        mx = max(obstacles)
        while sz < mx:
            sz *= 2
        tree = [0] * (sz*2+1)
        
        res = []
        for x in obstacles:
            l = sz
            r = sz+x-1
            
            s = 0
            while l <= r:
                if l % 2 == 1:
                    s = max(s, tree[l])
                if r % 2 == 0:
                    s = max(s, tree[r])

                l = (l + 1) // 2
                r = (r - 1) // 2
            
            tree[sz+x-1] = s+1
            res.append(s+1)
            
            p = (sz+x-1) // 2
            while p > 0:
                tree[p] = max(tree[p*2], tree[p*2+1])
                p //= 2
            
        return res