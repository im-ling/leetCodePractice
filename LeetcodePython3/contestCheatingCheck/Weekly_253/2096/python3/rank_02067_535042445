import sortedcontainers
class Solution:
    def longestObstacleCourseAtEachPosition(self, obstacles: List[int]) -> List[int]:
        '''Input: obstacles = [1,2,3,2]
        Output: [1,2,3,3]
        Explanation: The longest valid obstacle course at each position is:
        - i = 0: [1], [1] has length 1.
        - i = 1: [1,2], [1,2] has length 2.
        - i = 2: [1,2,3], [1,2,3] has length 3.
        - i = 3: [1,2,3,2], [1,2,2] has length 3.
        '''
        if not obstacles:
            return None
        n = len(obstacles)
        dp = [0] * n
        mono = [10**9] * n
        for i in range(n):
            j = bisect.bisect_right(mono, obstacles[i])
            mono[j] = obstacles[i]
            dp[i] += j + 1 if j else -n
        
        for i, v in enumerate(dp):
            if v < 0:
                dp[i] = 1
        return dp
        # print(dp)
#         res = [1]
#         n = len(obstacles)
        
#         def lengthOfLIS(nums):
#             dp = [10**10] * (len(nums) + 1)
#             lens = [0]*len(nums)
#             for i, elem in enumerate(nums): 
#                 lens[i] = bisect_right(dp, elem) + 1
#                 dp[lens[i] - 1] = elem 
#             return lens


#         for i in range(1, n):
#             left  = [num for num in obstacles[:i] if num <= obstacles[i]] + [obstacles[i]]

#             a = lengthOfLIS(left)
#             res.append(a)
#         return res
