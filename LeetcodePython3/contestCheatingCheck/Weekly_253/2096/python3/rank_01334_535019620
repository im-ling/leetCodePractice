class Solution:
    def longestObstacleCourseAtEachPosition(self, obstacles: List[int]) -> List[int]:
        dp = [0 for i in range(len(obstacles))]
        l = 0
        ans = []
        l += 1
        dp[0] = 1
        c = [0 for i in range(len(obstacles)+1)]
        c[1] = obstacles[0]
        ans.append(l)
        def search(c,l,curr):
            left, right = 0,l
            while left < right:
                mid = left+(right-left)//2
                if c[mid] > curr: right = mid
                else: left = mid+1
            return left
        for i in range(1,len(obstacles)):
            curr = obstacles[i]
            if curr < c[1]:
                c[1] = curr
                dp[i] = 1
            elif curr >= c[l]:
                c[l+1] = curr
                dp[i] = l+1
                l+=1
            else:
                temp = search(c,l,curr)
                c[temp] = curr
                dp[i] = temp
        return dp