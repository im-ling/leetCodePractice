class Solution:
    # def lengthOfLIS(self, nums: [int]) -> int:
    #     tails, res = [0] * len(nums), 0
    #     for num in nums:
    #         i, j = 0, res
    #         while i < j:
    #             m = (i + j) // 2
    #             if tails[m] <= num: 
    #                 i = m + 1 # 如果要求非严格递增，将此行 '<' 改为 '<=' 即可。
    #             else: 
    #                 j = m
    #         tails[i] = num
    #         if j == res: 
    #             res += 1
    #     return res
    
    def longestObstacleCourseAtEachPosition(self, obstacles: List[int]) -> List[int]:
        tails, res = [0] * len(obstacles), 0
        output = []
        for num in obstacles:
            i, j = 0, res
            while i < j:
                m = (i + j) // 2
                if tails[m] <= num: 
                    i = m + 1 # 如果要求非严格递增，将此行 '<' 改为 '<=' 即可。
                else: 
                    j = m
            tails[i] = num
            # print(i)
            output.append(i+1)
            if j == res: 
                res += 1
        return output
    
    
#         n = len(obstacles)
#         if n == 0:  
#             return 0
#         dp = [1] * n

#         for i in range(1, n):
#             for j in range(i):
#                 if obstacles[i] >= obstacles[j]:
#                     dp[i] = max( dp[j]+1, dp[i])
            

        return dp
        