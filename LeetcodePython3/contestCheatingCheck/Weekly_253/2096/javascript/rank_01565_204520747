const lowerBound = (arr,key,l=0,r=arr.length-1)=>{
    if(l>r) return l;
    const mid = l+Math.floor((r-l)/2);
    if(arr[mid]>key){
        return lowerBound(arr,key,l,mid-1);
    }else if(arr[mid]<=key){
        return lowerBound(arr,key,mid+1,r);
    }
}
const lis = (arr)=>{
    let dp = [],lengths=[];
    dp[0] = arr[0], lengths[0] = 1;
    for(let i=1;i<arr.length;i++){
        if(arr[i]>=dp[dp.length-1]){
            dp.push(arr[i]);
            lengths[i] = dp.length;
        }else if(arr[i]!=-1 && arr[i]<dp[dp.length-1]){
            const j = lowerBound(dp,arr[i]);
            dp[j] = arr[i];
            lengths[i] = j+1;
        }
    }
    return lengths;
}

/**
 * @param {number[]} obstacles
 * @return {number[]}
 */
var longestObstacleCourseAtEachPosition = function(obstacles) {
    const lengths = lis(obstacles);
    return lengths;
};

